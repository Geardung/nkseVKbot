import { BaseVKApi } from "../api/BaseVKApi";
import * as MethodsProps from "./MethodsProps";
import * as Responses from "./Responses";
export declare class VKApi extends BaseVKApi {
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    accountBan(params: MethodsProps.AccountBanParams): Promise<Responses.OkResponse>;
    /**
     * Changes a user password after access is successfully restored with the [vk.com/dev/auth.restore|auth.restore] method.
     *
     * @param {{
     *   restore_sid: (string|undefined),
     *   change_password_hash: (string|undefined),
     *   old_password: (string|undefined),
     *   new_password: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AccountChangePasswordResponse>}
     */
    accountChangePassword(params: MethodsProps.AccountChangePasswordParams): Promise<Responses.AccountChangePasswordResponse>;
    /**
     * Returns a list of active ads (offers) which executed by the user will bring him/her respective number of votes to his balance in the application.
     *
     * @param {{
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AccountGetActiveOffersResponse>}
     */
    accountGetActiveOffers(params: MethodsProps.AccountGetActiveOffersParams): Promise<Responses.AccountGetActiveOffersResponse>;
    /**
     * Gets settings of the user in this application.
     *
     * @param {{
     *   user_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AccountGetAppPermissionsResponse>}
     */
    accountGetAppPermissions(params: MethodsProps.AccountGetAppPermissionsParams): Promise<Responses.AccountGetAppPermissionsResponse>;
    /**
     * Returns a user's blacklist.
     *
     * @param {{
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AccountGetBannedResponse>}
     */
    accountGetBanned(params: MethodsProps.AccountGetBannedParams): Promise<Responses.AccountGetBannedResponse>;
    /**
     * Returns non-null values of user counters.
     *
     * @param {{
     *   filter: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AccountGetCountersResponse>}
     */
    accountGetCounters(params: MethodsProps.AccountGetCountersParams): Promise<Responses.AccountGetCountersResponse>;
    /**
     * Returns current account info.
     *
     * @param {{
     *   fields: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AccountGetInfoResponse>}
     */
    accountGetInfo(params: MethodsProps.AccountGetInfoParams): Promise<Responses.AccountGetInfoResponse>;
    /**
     * Returns the current account info.
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AccountGetProfileInfoResponse>}
     */
    accountGetProfileInfo(params: MethodsProps.AccountGetProfileInfoParams): Promise<Responses.AccountGetProfileInfoResponse>;
    /**
     * Gets settings of push notifications.
     *
     * @param {{
     *   device_id: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AccountGetPushSettingsResponse>}
     */
    accountGetPushSettings(params: MethodsProps.AccountGetPushSettingsParams): Promise<Responses.AccountGetPushSettingsResponse>;
    /**
     * Subscribes an iOS/Android/Windows Phone-based device to receive push notifications
     *
     * @param {{
     *   token: (string),
     *   device_model: (string|undefined),
     *   device_year: (number|undefined),
     *   device_id: (string),
     *   system_version: (string|undefined),
     *   settings: (string|undefined),
     *   sandbox: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    accountRegisterDevice(params: MethodsProps.AccountRegisterDeviceParams): Promise<Responses.OkResponse>;
    /**
     * Edits current profile info.
     *
     * @param {{
     *   first_name: (string|undefined),
     *   last_name: (string|undefined),
     *   maiden_name: (string|undefined),
     *   screen_name: (string|undefined),
     *   cancel_request_id: (number|undefined),
     *   sex: (number|undefined),
     *   relation: (number|undefined),
     *   relation_partner_id: (number|undefined),
     *   bdate: (string|undefined),
     *   bdate_visibility: (number|undefined),
     *   home_town: (string|undefined),
     *   country_id: (number|undefined),
     *   city_id: (number|undefined),
     *   status: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AccountSaveProfileInfoResponse>}
     */
    accountSaveProfileInfo(params: MethodsProps.AccountSaveProfileInfoParams): Promise<Responses.AccountSaveProfileInfoResponse>;
    /**
     * Allows to edit the current account info.
     *
     * @param {{
     *   name: (string|undefined),
     *   value: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    accountSetInfo(params: MethodsProps.AccountSetInfoParams): Promise<Responses.OkResponse>;
    /**
     * Sets an application screen name (up to 17 characters), that is shown to the user in the left menu.
     *
     * @param {{
     *   user_id: (number),
     *   name: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    accountSetNameInMenu(params: MethodsProps.AccountSetNameInMenuParams): Promise<Responses.OkResponse>;
    /**
     * Marks a current user as offline.
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    accountSetOffline(params: MethodsProps.AccountSetOfflineParams): Promise<Responses.OkResponse>;
    /**
     * Marks the current user as online for 15 minutes.
     *
     * @param {{
     *   voip: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    accountSetOnline(params: MethodsProps.AccountSetOnlineParams): Promise<Responses.OkResponse>;
    /**
     * Change push settings.
     *
     * @param {{
     *   device_id: (string),
     *   settings: (string|undefined),
     *   key: (string|undefined),
     *   value: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    accountSetPushSettings(params: MethodsProps.AccountSetPushSettingsParams): Promise<Responses.OkResponse>;
    /**
     * Mutes push notifications for the set period of time.
     *
     * @param {{
     *   device_id: (string|undefined),
     *   time: (number|undefined),
     *   peer_id: (number|undefined),
     *   sound: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    accountSetSilenceMode(params: MethodsProps.AccountSetSilenceModeParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    accountUnban(params: MethodsProps.AccountUnbanParams): Promise<Responses.OkResponse>;
    /**
     * Unsubscribes a device from push notifications.
     *
     * @param {{
     *   device_id: (string|undefined),
     *   sandbox: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    accountUnregisterDevice(params: MethodsProps.AccountUnregisterDeviceParams): Promise<Responses.OkResponse>;
    /**
     * Adds managers and/or supervisors to advertising account.
     *
     * @param {{
     *   account_id: (number),
     *   data: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsAddOfficeUsersResponse>}
     */
    adsAddOfficeUsers(params: MethodsProps.AdsAddOfficeUsersParams): Promise<Responses.AdsAddOfficeUsersResponse>;
    /**
     * Allows to check the ad link.
     *
     * @param {{
     *   account_id: (number),
     *   link_type: (string),
     *   link_url: (string),
     *   campaign_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsCheckLinkResponse>}
     */
    adsCheckLink(params: MethodsProps.AdsCheckLinkParams): Promise<Responses.AdsCheckLinkResponse>;
    /**
     * Creates ads.
     *
     * @param {{
     *   account_id: (number),
     *   data: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsCreateAdsResponse>}
     */
    adsCreateAds(params: MethodsProps.AdsCreateAdsParams): Promise<Responses.AdsCreateAdsResponse>;
    /**
     * Creates advertising campaigns.
     *
     * @param {{
     *   account_id: (number),
     *   data: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsCreateCampaignsResponse>}
     */
    adsCreateCampaigns(params: MethodsProps.AdsCreateCampaignsParams): Promise<Responses.AdsCreateCampaignsResponse>;
    /**
     * Creates clients of an advertising agency.
     *
     * @param {{
     *   account_id: (number),
     *   data: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsCreateClientsResponse>}
     */
    adsCreateClients(params: MethodsProps.AdsCreateClientsParams): Promise<Responses.AdsCreateClientsResponse>;
    /**
     * Creates a group to re-target ads for users who visited advertiser's site (viewed information about the product, registered, etc.).
     *
     * @param {{
     *   account_id: (number),
     *   client_id: (number|undefined),
     *   name: (string),
     *   lifetime: (number|undefined),
     *   target_pixel_id: (number|undefined),
     *   target_pixel_rules: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsCreateTargetGroupResponse>}
     */
    adsCreateTargetGroup(params: MethodsProps.AdsCreateTargetGroupParams): Promise<Responses.AdsCreateTargetGroupResponse>;
    /**
     * Archives ads.
     *
     * @param {{
     *   account_id: (number),
     *   ids: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsDeleteAdsResponse>}
     */
    adsDeleteAds(params: MethodsProps.AdsDeleteAdsParams): Promise<Responses.AdsDeleteAdsResponse>;
    /**
     * Archives advertising campaigns.
     *
     * @param {{
     *   account_id: (number),
     *   ids: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsDeleteCampaignsResponse>}
     */
    adsDeleteCampaigns(params: MethodsProps.AdsDeleteCampaignsParams): Promise<Responses.AdsDeleteCampaignsResponse>;
    /**
     * Archives clients of an advertising agency.
     *
     * @param {{
     *   account_id: (number),
     *   ids: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsDeleteClientsResponse>}
     */
    adsDeleteClients(params: MethodsProps.AdsDeleteClientsParams): Promise<Responses.AdsDeleteClientsResponse>;
    /**
     * Deletes a retarget group.
     *
     * @param {{
     *   account_id: (number),
     *   client_id: (number|undefined),
     *   target_group_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    adsDeleteTargetGroup(params: MethodsProps.AdsDeleteTargetGroupParams): Promise<Responses.OkResponse>;
    /**
     * Returns a list of advertising accounts.
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetAccountsResponse>}
     */
    adsGetAccounts(params: MethodsProps.AdsGetAccountsParams): Promise<Responses.AdsGetAccountsResponse>;
    /**
     * Returns number of ads.
     *
     * @param {{
     *   account_id: (number),
     *   ad_ids: (string|undefined),
     *   campaign_ids: (string|undefined),
     *   client_id: (number|undefined),
     *   include_deleted: (boolean|undefined),
     *   limit: (number|undefined),
     *   offset: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetAdsResponse>}
     */
    adsGetAds(params: MethodsProps.AdsGetAdsParams): Promise<Responses.AdsGetAdsResponse>;
    /**
     * Returns descriptions of ad layouts.
     *
     * @param {{
     *   account_id: (number),
     *   ad_ids: (string|undefined),
     *   campaign_ids: (string|undefined),
     *   client_id: (number|undefined),
     *   include_deleted: (boolean|undefined),
     *   limit: (number|undefined),
     *   offset: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetAdsLayoutResponse>}
     */
    adsGetAdsLayout(params: MethodsProps.AdsGetAdsLayoutParams): Promise<Responses.AdsGetAdsLayoutResponse>;
    /**
     * Returns ad targeting parameters.
     *
     * @param {{
     *   account_id: (number),
     *   ad_ids: (string|undefined),
     *   campaign_ids: (string|undefined),
     *   client_id: (number|undefined),
     *   include_deleted: (boolean|undefined),
     *   limit: (number|undefined),
     *   offset: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetAdsTargetingResponse>}
     */
    adsGetAdsTargeting(params: MethodsProps.AdsGetAdsTargetingParams): Promise<Responses.AdsGetAdsTargetingResponse>;
    /**
     * Returns current budget of the advertising account.
     *
     * @param {{
     *   account_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetBudgetResponse>}
     */
    adsGetBudget(params: MethodsProps.AdsGetBudgetParams): Promise<Responses.AdsGetBudgetResponse>;
    /**
     * Returns a list of campaigns in an advertising account.
     *
     * @param {{
     *   account_id: (number),
     *   client_id: (number|undefined),
     *   include_deleted: (boolean|undefined),
     *   campaign_ids: (string|undefined),
     *   fields: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetCampaignsResponse>}
     */
    adsGetCampaigns(params: MethodsProps.AdsGetCampaignsParams): Promise<Responses.AdsGetCampaignsResponse>;
    /**
     * Returns a list of possible ad categories.
     *
     * @param {{
     *   lang: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetCategoriesResponse>}
     */
    adsGetCategories(params: MethodsProps.AdsGetCategoriesParams): Promise<Responses.AdsGetCategoriesResponse>;
    /**
     * Returns a list of advertising agency's clients.
     *
     * @param {{
     *   account_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetClientsResponse>}
     */
    adsGetClients(params: MethodsProps.AdsGetClientsParams): Promise<Responses.AdsGetClientsResponse>;
    /**
     * Returns demographics for ads or campaigns.
     *
     * @param {{
     *   account_id: (number),
     *   ids_type: (string),
     *   ids: (string),
     *   period: (string),
     *   date_from: (string),
     *   date_to: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetDemographicsResponse>}
     */
    adsGetDemographics(params: MethodsProps.AdsGetDemographicsParams): Promise<Responses.AdsGetDemographicsResponse>;
    /**
     * Returns information about current state of a counter — number of remaining runs of methods and time to the next counter nulling in seconds.
     *
     * @param {{
     *   account_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetFloodStatsResponse>}
     */
    adsGetFloodStats(params: MethodsProps.AdsGetFloodStatsParams): Promise<Responses.AdsGetFloodStatsResponse>;
    /**
     * Returns a list of managers and supervisors of advertising account.
     *
     * @param {{
     *   account_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetOfficeUsersResponse>}
     */
    adsGetOfficeUsers(params: MethodsProps.AdsGetOfficeUsersParams): Promise<Responses.AdsGetOfficeUsersResponse>;
    /**
     * Returns detailed statistics of promoted posts reach from campaigns and ads.
     *
     * @param {{
     *   account_id: (number),
     *   ids_type: (string),
     *   ids: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetPostsReachResponse>}
     */
    adsGetPostsReach(params: MethodsProps.AdsGetPostsReachParams): Promise<Responses.AdsGetPostsReachResponse>;
    /**
     * Returns a reason of ad rejection for pre-moderation.
     *
     * @param {{
     *   account_id: (number),
     *   ad_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetRejectionReasonResponse>}
     */
    adsGetRejectionReason(params: MethodsProps.AdsGetRejectionReasonParams): Promise<Responses.AdsGetRejectionReasonResponse>;
    /**
     * Returns statistics of performance indicators for ads, campaigns, clients or the whole account.
     *
     * @param {{
     *   account_id: (number),
     *   ids_type: (string),
     *   ids: (string),
     *   period: (string),
     *   date_from: (string),
     *   date_to: (string),
     *   stats_fields: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetStatisticsResponse>}
     */
    adsGetStatistics(params: MethodsProps.AdsGetStatisticsParams): Promise<Responses.AdsGetStatisticsResponse>;
    /**
     * Returns a set of auto-suggestions for various targeting parameters.
     *
     * @param {{
     *   section: (string),
     *   ids: (string|undefined),
     *   q: (string|undefined),
     *   country: (number|undefined),
     *   cities: (string|undefined),
     *   lang: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetSuggestionsResponse>}
     */
    adsGetSuggestions(params: MethodsProps.AdsGetSuggestionsParams): Promise<Responses.AdsGetSuggestionsResponse>;
    /**
     * Returns a list of target groups.
     *
     * @param {{
     *   account_id: (number),
     *   client_id: (number|undefined),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetTargetGroupsResponse>}
     */
    adsGetTargetGroups(params: MethodsProps.AdsGetTargetGroupsParams): Promise<Responses.AdsGetTargetGroupsResponse>;
    /**
     * Returns the size of targeting audience, and also recommended values for CPC and CPM.
     *
     * @param {{
     *   account_id: (number),
     *   client_id: (number|undefined),
     *   criteria: (string|undefined),
     *   ad_id: (number|undefined),
     *   ad_format: (number|undefined),
     *   ad_platform: (string|undefined),
     *   ad_platform_no_wall: (string|undefined),
     *   ad_platform_no_ad_network: (string|undefined),
     *   link_url: (string),
     *   link_domain: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetTargetingStatsResponse>}
     */
    adsGetTargetingStats(params: MethodsProps.AdsGetTargetingStatsParams): Promise<Responses.AdsGetTargetingStatsResponse>;
    /**
     * Returns URL to upload an ad photo to.
     *
     * @param {{
     *   ad_format: (number),
     *   icon: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetUploadURLResponse>}
     */
    adsGetUploadURL(params: MethodsProps.AdsGetUploadURLParams): Promise<Responses.AdsGetUploadURLResponse>;
    /**
     * Returns URL to upload an ad video to.
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsGetVideoUploadURLResponse>}
     */
    adsGetVideoUploadURL(params: MethodsProps.AdsGetVideoUploadURLParams): Promise<Responses.AdsGetVideoUploadURLResponse>;
    /**
     * Imports a list of advertiser's contacts to count VK registered users against the target group.
     *
     * @param {{
     *   account_id: (number),
     *   client_id: (number|undefined),
     *   target_group_id: (number),
     *   contacts: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsImportTargetContactsResponse>}
     */
    adsImportTargetContacts(params: MethodsProps.AdsImportTargetContactsParams): Promise<Responses.AdsImportTargetContactsResponse>;
    /**
     * Removes managers and/or supervisors from advertising account.
     *
     * @param {{
     *   account_id: (number),
     *   ids: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsRemoveOfficeUsersResponse>}
     */
    adsRemoveOfficeUsers(params: MethodsProps.AdsRemoveOfficeUsersParams): Promise<Responses.AdsRemoveOfficeUsersResponse>;
    /**
     * Edits ads.
     *
     * @param {{
     *   account_id: (number),
     *   data: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsUpdateAdsResponse>}
     */
    adsUpdateAds(params: MethodsProps.AdsUpdateAdsParams): Promise<Responses.AdsUpdateAdsResponse>;
    /**
     * Edits advertising campaigns.
     *
     * @param {{
     *   account_id: (number),
     *   data: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsUpdateCampaignsResponse>}
     */
    adsUpdateCampaigns(params: MethodsProps.AdsUpdateCampaignsParams): Promise<Responses.AdsUpdateCampaignsResponse>;
    /**
     * Edits clients of an advertising agency.
     *
     * @param {{
     *   account_id: (number),
     *   data: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AdsUpdateClientsResponse>}
     */
    adsUpdateClients(params: MethodsProps.AdsUpdateClientsParams): Promise<Responses.AdsUpdateClientsResponse>;
    /**
     * Edits a retarget group.
     *
     * @param {{
     *   account_id: (number),
     *   client_id: (number|undefined),
     *   target_group_id: (number),
     *   name: (string),
     *   domain: (string|undefined),
     *   lifetime: (number|undefined),
     *   target_pixel_id: (number|undefined),
     *   target_pixel_rules: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    adsUpdateTargetGroup(params: MethodsProps.AdsUpdateTargetGroupParams): Promise<Responses.OkResponse>;
    /**
     * Allows to update community app widget
     *
     * @param {{
     *   code: (string),
     *   type: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    appWidgetsUpdate(params: MethodsProps.AppWidgetsUpdateParams): Promise<Responses.OkResponse>;
    /**
     * Deletes all request notifications from the current app.
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    appsDeleteAppRequests(params: MethodsProps.AppsDeleteAppRequestsParams): Promise<Responses.OkResponse>;
    /**
     * Returns applications data.
     *
     * @param {{
     *   app_id: (number|undefined),
     *   app_ids: (string[]|undefined),
     *   platform: (string|undefined),
     *   extended: (boolean|undefined),
     *   return_friends: (boolean|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   name_case: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AppsGetResponse>}
     */
    appsGet(params: MethodsProps.AppsGetParams): Promise<Responses.AppsGetResponse>;
    /**
     * Returns a list of applications (apps) available to users in the App Catalog.
     *
     * @param {{
     *   sort: (string|undefined),
     *   offset: (number|undefined),
     *   count: (number),
     *   platform: (string|undefined),
     *   extended: (boolean|undefined),
     *   return_friends: (boolean|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   name_case: (string|undefined),
     *   q: (string|undefined),
     *   genre_id: (number|undefined),
     *   filter: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AppsGetCatalogResponse>}
     */
    appsGetCatalog(params: MethodsProps.AppsGetCatalogParams): Promise<Responses.AppsGetCatalogResponse>;
    /**
     * Creates friends list for requests and invites in current app.
     *
     * @param {{
     *   extended: (boolean|undefined),
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   type: (string|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AppsGetFriendsListResponse>}
     */
    appsGetFriendsList(params: MethodsProps.AppsGetFriendsListParams): Promise<Responses.AppsGetFriendsListResponse>;
    /**
     * Returns players rating in the game.
     *
     * @param {{
     *   type: (string),
     *   global: (boolean|undefined),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AppsGetLeaderboardResponse>}
     */
    appsGetLeaderboard(params: MethodsProps.AppsGetLeaderboardParams): Promise<Responses.AppsGetLeaderboardResponse>;
    /**
     * Returns scopes for auth
     *
     * @param {{
     *   type: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AppsGetScopesResponse>}
     */
    appsGetScopes(params: MethodsProps.AppsGetScopesParams): Promise<Responses.AppsGetScopesResponse>;
    /**
     * Returns user score in app
     *
     * @param {{
     *   user_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AppsGetScoreResponse>}
     */
    appsGetScore(params: MethodsProps.AppsGetScoreParams): Promise<Responses.AppsGetScoreResponse>;
    /**
     * undefined
     *
     * @param {{
     *   promo_id: (number),
     *   user_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BaseBoolResponse>}
     */
    appsPromoHasActiveGift(params: MethodsProps.AppsPromoHasActiveGiftParams): Promise<Responses.BaseBoolResponse>;
    /**
     * undefined
     *
     * @param {{
     *   promo_id: (number),
     *   user_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BaseBoolResponse>}
     */
    appsPromoUseGift(params: MethodsProps.AppsPromoUseGiftParams): Promise<Responses.BaseBoolResponse>;
    /**
     * Sends a request to another user in an app that uses VK authorization.
     *
     * @param {{
     *   user_id: (number),
     *   text: (string|undefined),
     *   type: (string|undefined),
     *   name: (string|undefined),
     *   key: (string|undefined),
     *   separate: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AppsSendRequestResponse>}
     */
    appsSendRequest(params: MethodsProps.AppsSendRequestParams): Promise<Responses.AppsSendRequestResponse>;
    /**
     * Checks a user's phone number for correctness.
     *
     * @param {{
     *   phone: (string),
     *   client_id: (number|undefined),
     *   client_secret: (string|undefined),
     *   auth_by_phone: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    authCheckPhone(params: MethodsProps.AuthCheckPhoneParams): Promise<Responses.OkResponse>;
    /**
     * Allows to restore account access using a code received via SMS. " This method is only available for apps with [vk.com/dev/auth_direct|Direct authorization] access. "
     *
     * @param {{
     *   phone: (string),
     *   last_name: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.AuthRestoreResponse>}
     */
    authRestore(params: MethodsProps.AuthRestoreParams): Promise<Responses.AuthRestoreResponse>;
    /**
     * Creates a new topic on a community's discussion board.
     *
     * @param {{
     *   group_id: (number),
     *   title: (string),
     *   text: (string|undefined),
     *   from_group: (boolean|undefined),
     *   attachments: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BoardAddTopicResponse>}
     */
    boardAddTopic(params: MethodsProps.BoardAddTopicParams): Promise<Responses.BoardAddTopicResponse>;
    /**
     * Closes a topic on a community's discussion board so that comments cannot be posted.
     *
     * @param {{
     *   group_id: (number),
     *   topic_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    boardCloseTopic(params: MethodsProps.BoardCloseTopicParams): Promise<Responses.OkResponse>;
    /**
     * Adds a comment on a topic on a community's discussion board.
     *
     * @param {{
     *   group_id: (number),
     *   topic_id: (number),
     *   message: (string|undefined),
     *   attachments: (string[]|undefined),
     *   from_group: (boolean|undefined),
     *   sticker_id: (number|undefined),
     *   guid: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BoardCreateCommentResponse>}
     */
    boardCreateComment(params: MethodsProps.BoardCreateCommentParams): Promise<Responses.BoardCreateCommentResponse>;
    /**
     * Deletes a comment on a topic on a community's discussion board.
     *
     * @param {{
     *   group_id: (number),
     *   topic_id: (number),
     *   comment_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    boardDeleteComment(params: MethodsProps.BoardDeleteCommentParams): Promise<Responses.OkResponse>;
    /**
     * Deletes a topic from a community's discussion board.
     *
     * @param {{
     *   group_id: (number),
     *   topic_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    boardDeleteTopic(params: MethodsProps.BoardDeleteTopicParams): Promise<Responses.OkResponse>;
    /**
     * Edits a comment on a topic on a community's discussion board.
     *
     * @param {{
     *   group_id: (number),
     *   topic_id: (number),
     *   comment_id: (number),
     *   message: (string|undefined),
     *   attachments: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    boardEditComment(params: MethodsProps.BoardEditCommentParams): Promise<Responses.OkResponse>;
    /**
     * Edits the title of a topic on a community's discussion board.
     *
     * @param {{
     *   group_id: (number),
     *   topic_id: (number),
     *   title: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    boardEditTopic(params: MethodsProps.BoardEditTopicParams): Promise<Responses.OkResponse>;
    /**
     * Pins a topic (fixes its place) to the top of a community's discussion board.
     *
     * @param {{
     *   group_id: (number),
     *   topic_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    boardFixTopic(params: MethodsProps.BoardFixTopicParams): Promise<Responses.OkResponse>;
    /**
     * Returns a list of comments on a topic on a community's discussion board.
     *
     * @param {{
     *   group_id: (number),
     *   topic_id: (number),
     *   need_likes: (boolean|undefined),
     *   start_comment_id: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   extended: (boolean|undefined),
     *   sort: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BoardGetCommentsResponse>}
     */
    boardGetComments(params: MethodsProps.BoardGetCommentsParams): Promise<Responses.BoardGetCommentsResponse>;
    /**
     * Returns a list of topics on a community's discussion board.
     *
     * @param {{
     *   group_id: (number),
     *   topic_ids: (number[]|undefined),
     *   order: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   extended: (boolean|undefined),
     *   preview: (number|undefined),
     *   preview_length: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BoardGetTopicsResponse>}
     */
    boardGetTopics(params: MethodsProps.BoardGetTopicsParams): Promise<Responses.BoardGetTopicsResponse>;
    /**
     * Re-opens a previously closed topic on a community's discussion board.
     *
     * @param {{
     *   group_id: (number),
     *   topic_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    boardOpenTopic(params: MethodsProps.BoardOpenTopicParams): Promise<Responses.OkResponse>;
    /**
     * Restores a comment deleted from a topic on a community's discussion board.
     *
     * @param {{
     *   group_id: (number),
     *   topic_id: (number),
     *   comment_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    boardRestoreComment(params: MethodsProps.BoardRestoreCommentParams): Promise<Responses.OkResponse>;
    /**
     * Unpins a pinned topic from the top of a community's discussion board.
     *
     * @param {{
     *   group_id: (number),
     *   topic_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    boardUnfixTopic(params: MethodsProps.BoardUnfixTopicParams): Promise<Responses.OkResponse>;
    /**
     * Returns list of chairs on a specified faculty.
     *
     * @param {{
     *   faculty_id: (number),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DatabaseGetChairsResponse>}
     */
    databaseGetChairs(params: MethodsProps.DatabaseGetChairsParams): Promise<Responses.DatabaseGetChairsResponse>;
    /**
     * Returns a list of cities.
     *
     * @param {{
     *   country_id: (number),
     *   region_id: (number|undefined),
     *   q: (string|undefined),
     *   need_all: (boolean|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DatabaseGetCitiesResponse>}
     */
    databaseGetCities(params: MethodsProps.DatabaseGetCitiesParams): Promise<Responses.DatabaseGetCitiesResponse>;
    /**
     * Returns information about cities by their IDs.
     *
     * @param {{
     *   city_ids: (number[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DatabaseGetCitiesByIdResponse>}
     */
    databaseGetCitiesById(params: MethodsProps.DatabaseGetCitiesByIdParams): Promise<Responses.DatabaseGetCitiesByIdResponse>;
    /**
     * Returns a list of countries.
     *
     * @param {{
     *   need_all: (boolean|undefined),
     *   code: (string|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DatabaseGetCountriesResponse>}
     */
    databaseGetCountries(params: MethodsProps.DatabaseGetCountriesParams): Promise<Responses.DatabaseGetCountriesResponse>;
    /**
     * Returns information about countries by their IDs.
     *
     * @param {{
     *   country_ids: (number[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DatabaseGetCountriesByIdResponse>}
     */
    databaseGetCountriesById(params: MethodsProps.DatabaseGetCountriesByIdParams): Promise<Responses.DatabaseGetCountriesByIdResponse>;
    /**
     * Returns a list of faculties (i.e., university departments).
     *
     * @param {{
     *   university_id: (number),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DatabaseGetFacultiesResponse>}
     */
    databaseGetFaculties(params: MethodsProps.DatabaseGetFacultiesParams): Promise<Responses.DatabaseGetFacultiesResponse>;
    /**
     * Get metro stations by city
     *
     * @param {{
     *   city_id: (number),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DatabaseGetMetroStationsResponse>}
     */
    databaseGetMetroStations(params: MethodsProps.DatabaseGetMetroStationsParams): Promise<Responses.DatabaseGetMetroStationsResponse>;
    /**
     * Get metro station by his id
     *
     * @param {{
     *   station_ids: (number[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DatabaseGetMetroStationsByIdResponse>}
     */
    databaseGetMetroStationsById(params: MethodsProps.DatabaseGetMetroStationsByIdParams): Promise<Responses.DatabaseGetMetroStationsByIdResponse>;
    /**
     * Returns a list of regions.
     *
     * @param {{
     *   country_id: (number),
     *   q: (string|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DatabaseGetRegionsResponse>}
     */
    databaseGetRegions(params: MethodsProps.DatabaseGetRegionsParams): Promise<Responses.DatabaseGetRegionsResponse>;
    /**
     * Returns a list of school classes specified for the country.
     *
     * @param {{
     *   country_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DatabaseGetSchoolClassesResponse>}
     */
    databaseGetSchoolClasses(params: MethodsProps.DatabaseGetSchoolClassesParams): Promise<Responses.DatabaseGetSchoolClassesResponse>;
    /**
     * Returns a list of schools.
     *
     * @param {{
     *   q: (string|undefined),
     *   city_id: (number),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DatabaseGetSchoolsResponse>}
     */
    databaseGetSchools(params: MethodsProps.DatabaseGetSchoolsParams): Promise<Responses.DatabaseGetSchoolsResponse>;
    /**
     * Returns a list of higher education institutions.
     *
     * @param {{
     *   q: (string|undefined),
     *   country_id: (number|undefined),
     *   city_id: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DatabaseGetUniversitiesResponse>}
     */
    databaseGetUniversities(params: MethodsProps.DatabaseGetUniversitiesParams): Promise<Responses.DatabaseGetUniversitiesResponse>;
    /**
     * Copies a document to a user's or community's document list.
     *
     * @param {{
     *   owner_id: (number),
     *   doc_id: (number),
     *   access_key: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DocsAddResponse>}
     */
    docsAdd(params: MethodsProps.DocsAddParams): Promise<Responses.DocsAddResponse>;
    /**
     * Deletes a user or community document.
     *
     * @param {{
     *   owner_id: (number),
     *   doc_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    docsDelete(params: MethodsProps.DocsDeleteParams): Promise<Responses.OkResponse>;
    /**
     * Edits a document.
     *
     * @param {{
     *   owner_id: (number),
     *   doc_id: (number),
     *   title: (string|undefined),
     *   tags: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    docsEdit(params: MethodsProps.DocsEditParams): Promise<Responses.OkResponse>;
    /**
     * Returns detailed information about user or community documents.
     *
     * @param {{
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   type: (number|undefined),
     *   owner_id: (number|undefined),
     *   return_tags: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DocsGetResponse>}
     */
    docsGet(params: MethodsProps.DocsGetParams): Promise<Responses.DocsGetResponse>;
    /**
     * Returns information about documents by their IDs.
     *
     * @param {{
     *   docs: (string[]),
     *   return_tags: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DocsGetByIdResponse>}
     */
    docsGetById(params: MethodsProps.DocsGetByIdParams): Promise<Responses.DocsGetByIdResponse>;
    /**
     * Returns the server address for document upload.
     *
     * @param {{
     *   type: (string|undefined),
     *   peer_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BaseGetUploadServerResponse>}
     */
    docsGetMessagesUploadServer(params: MethodsProps.DocsGetMessagesUploadServerParams): Promise<Responses.BaseGetUploadServerResponse>;
    /**
     * Returns documents types available for current user.
     *
     * @param {{
     *   owner_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DocsGetTypesResponse>}
     */
    docsGetTypes(params: MethodsProps.DocsGetTypesParams): Promise<Responses.DocsGetTypesResponse>;
    /**
     * Returns the server address for document upload.
     *
     * @param {{
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DocsGetUploadServer>}
     */
    docsGetUploadServer(params: MethodsProps.DocsGetUploadServerParams): Promise<Responses.DocsGetUploadServer>;
    /**
     * Returns the server address for document upload onto a user's or community's wall.
     *
     * @param {{
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BaseGetUploadServerResponse>}
     */
    docsGetWallUploadServer(params: MethodsProps.DocsGetWallUploadServerParams): Promise<Responses.BaseGetUploadServerResponse>;
    /**
     * Saves a document after [vk.com/dev/upload_files_2|uploading it to a server].
     *
     * @param {{
     *   file: (string),
     *   title: (string|undefined),
     *   tags: (string|undefined),
     *   return_tags: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DocsSaveResponse>}
     */
    docsSave(params: MethodsProps.DocsSaveParams): Promise<Responses.DocsSaveResponse>;
    /**
     * Returns a list of documents matching the search criteria.
     *
     * @param {{
     *   q: (string),
     *   search_own: (boolean|undefined),
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   return_tags: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.DocsSearchResponse>}
     */
    docsSearch(params: MethodsProps.DocsSearchParams): Promise<Responses.DocsSearchResponse>;
    /**
     * undefined
     *
     * @param {{
     *   url: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveAddArticle(params: MethodsProps.FaveAddArticleParams): Promise<Responses.OkResponse>;
    /**
     * Adds a link to user faves.
     *
     * @param {{
     *   link: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveAddLink(params: MethodsProps.FaveAddLinkParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   user_id: (number|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveAddPage(params: MethodsProps.FaveAddPageParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number),
     *   id: (number),
     *   access_key: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveAddPost(params: MethodsProps.FaveAddPostParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number),
     *   id: (number),
     *   access_key: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveAddProduct(params: MethodsProps.FaveAddProductParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   name: (string|undefined),
     *   position: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FaveAddTagResponse>}
     */
    faveAddTag(params: MethodsProps.FaveAddTagParams): Promise<Responses.FaveAddTagResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number),
     *   id: (number),
     *   access_key: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveAddVideo(params: MethodsProps.FaveAddVideoParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   id: (number),
     *   name: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveEditTag(params: MethodsProps.FaveEditTagParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   extended: (boolean|undefined),
     *   item_type: (string|undefined),
     *   tag_id: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   fields: (string|undefined),
     *   is_from_snackbar: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FaveGetResponse>}
     */
    faveGet(params: MethodsProps.FaveGetParams): Promise<Responses.FaveGetResponse>;
    /**
     * undefined
     *
     * @param {{
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   type: (string|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   tag_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FaveGetPagesResponse>}
     */
    faveGetPages(params: MethodsProps.FaveGetPagesParams): Promise<Responses.FaveGetPagesResponse>;
    /**
     * undefined
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FaveGetTagsResponse>}
     */
    faveGetTags(params: MethodsProps.FaveGetTagsParams): Promise<Responses.FaveGetTagsResponse>;
    /**
     * undefined
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BaseBoolResponse>}
     */
    faveMarkSeen(params: MethodsProps.FaveMarkSeenParams): Promise<Responses.BaseBoolResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number),
     *   article_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BaseBoolResponse>}
     */
    faveRemoveArticle(params: MethodsProps.FaveRemoveArticleParams): Promise<Responses.BaseBoolResponse>;
    /**
     * Removes link from the user's faves.
     *
     * @param {{
     *   link_id: (string|undefined),
     *   link: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveRemoveLink(params: MethodsProps.FaveRemoveLinkParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   user_id: (number|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveRemovePage(params: MethodsProps.FaveRemovePageParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number),
     *   id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveRemovePost(params: MethodsProps.FaveRemovePostParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number),
     *   id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveRemoveProduct(params: MethodsProps.FaveRemoveProductParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveRemoveTag(params: MethodsProps.FaveRemoveTagParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   ids: (number[]),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveReorderTags(params: MethodsProps.FaveReorderTagsParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   user_id: (number|undefined),
     *   group_id: (number|undefined),
     *   tag_ids: (number[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveSetPageTags(params: MethodsProps.FaveSetPageTagsParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   item_type: (string|undefined),
     *   item_owner_id: (number|undefined),
     *   item_id: (number|undefined),
     *   tag_ids: (number[]|undefined),
     *   link_id: (string|undefined),
     *   link_url: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveSetTags(params: MethodsProps.FaveSetTagsParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   user_id: (number|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    faveTrackPageInteraction(params: MethodsProps.FaveTrackPageInteractionParams): Promise<Responses.OkResponse>;
    /**
     * Approves or creates a friend request.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   text: (string|undefined),
     *   follow: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsAddResponse>}
     */
    friendsAdd(params: MethodsProps.FriendsAddParams): Promise<Responses.FriendsAddResponse>;
    /**
     * Creates a new friend list for the current user.
     *
     * @param {{
     *   name: (string),
     *   user_ids: (number[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsAddListResponse>}
     */
    friendsAddList(params: MethodsProps.FriendsAddListParams): Promise<Responses.FriendsAddListResponse>;
    /**
     * Checks the current user's friendship status with other specified users.
     *
     * @param {{
     *   user_ids: (number[]),
     *   need_sign: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsAreFriendsResponse>}
     */
    friendsAreFriends(params: MethodsProps.FriendsAreFriendsParams): Promise<Responses.FriendsAreFriendsResponse>;
    /**
     * Declines a friend request or deletes a user from the current user's friend list.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsDeleteResponse>}
     */
    friendsDelete(params: MethodsProps.FriendsDeleteParams): Promise<Responses.FriendsDeleteResponse>;
    /**
     * Marks all incoming friend requests as viewed.
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    friendsDeleteAllRequests(params: MethodsProps.FriendsDeleteAllRequestsParams): Promise<Responses.OkResponse>;
    /**
     * Deletes a friend list of the current user.
     *
     * @param {{
     *   list_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    friendsDeleteList(params: MethodsProps.FriendsDeleteListParams): Promise<Responses.OkResponse>;
    /**
     * Edits the friend lists of the selected user.
     *
     * @param {{
     *   user_id: (number),
     *   list_ids: (number[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    friendsEdit(params: MethodsProps.FriendsEditParams): Promise<Responses.OkResponse>;
    /**
     * Edits a friend list of the current user.
     *
     * @param {{
     *   name: (string|undefined),
     *   list_id: (number),
     *   user_ids: (number[]|undefined),
     *   add_user_ids: (number[]|undefined),
     *   delete_user_ids: (number[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    friendsEditList(params: MethodsProps.FriendsEditListParams): Promise<Responses.OkResponse>;
    /**
     * Returns a list of user IDs or detailed information about a user's friends.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   order: (string|undefined),
     *   list_id: (number|undefined),
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   name_case: (string|undefined),
     *   ref: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsGetResponse>}
     */
    friendsGet(params: MethodsProps.FriendsGetParams): Promise<Responses.FriendsGetResponse>;
    /**
     * Returns a list of IDs of the current user's friends who installed the application.
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsGetAppUsersResponse>}
     */
    friendsGetAppUsers(params: MethodsProps.FriendsGetAppUsersParams): Promise<Responses.FriendsGetAppUsersResponse>;
    /**
     * Returns a list of the current user's friends whose phone numbers, validated or specified in a profile, are in a given list.
     *
     * @param {{
     *   phones: (string[]|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsGetByPhonesResponse>}
     */
    friendsGetByPhones(params: MethodsProps.FriendsGetByPhonesParams): Promise<Responses.FriendsGetByPhonesResponse>;
    /**
     * Returns a list of the user's friend lists.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   return_system: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsGetListsResponse>}
     */
    friendsGetLists(params: MethodsProps.FriendsGetListsParams): Promise<Responses.FriendsGetListsResponse>;
    /**
     * Returns a list of user IDs of the mutual friends of two users.
     *
     * @param {{
     *   source_uid: (number|undefined),
     *   target_uid: (number|undefined),
     *   target_uids: (number[]|undefined),
     *   order: (string|undefined),
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsGetMutualResponse>}
     */
    friendsGetMutual(params: MethodsProps.FriendsGetMutualParams): Promise<Responses.FriendsGetMutualResponse>;
    /**
     * Returns a list of user IDs of a user's friends who are online.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   list_id: (number|undefined),
     *   online_mobile: (boolean|undefined),
     *   order: (string|undefined),
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsGetOnlineResponse>}
     */
    friendsGetOnline(params: MethodsProps.FriendsGetOnlineParams): Promise<Responses.FriendsGetOnlineResponse>;
    /**
     * Returns a list of user IDs of the current user's recently added friends.
     *
     * @param {{
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsGetRecentResponse>}
     */
    friendsGetRecent(params: MethodsProps.FriendsGetRecentParams): Promise<Responses.FriendsGetRecentResponse>;
    /**
     * Returns information about the current user's incoming and outgoing friend requests.
     *
     * @param {{
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   extended: (boolean|undefined),
     *   need_mutual: (boolean|undefined),
     *   out: (boolean|undefined),
     *   sort: (number|undefined),
     *   need_viewed: (boolean|undefined),
     *   suggested: (boolean|undefined),
     *   ref: (string|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsGetRequestsResponse>}
     */
    friendsGetRequests(params: MethodsProps.FriendsGetRequestsParams): Promise<Responses.FriendsGetRequestsResponse>;
    /**
     * Returns a list of profiles of users whom the current user may know.
     *
     * @param {{
     *   filter: (string[]|undefined),
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   name_case: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsGetSuggestionsResponse>}
     */
    friendsGetSuggestions(params: MethodsProps.FriendsGetSuggestionsParams): Promise<Responses.FriendsGetSuggestionsResponse>;
    /**
     * Returns a list of friends matching the search criteria.
     *
     * @param {{
     *   user_id: (number),
     *   q: (string|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   name_case: (string|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.FriendsSearchResponse>}
     */
    friendsSearch(params: MethodsProps.FriendsSearchParams): Promise<Responses.FriendsSearchResponse>;
    /**
     * Returns a list of user gifts.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GiftsGetResponse>}
     */
    giftsGet(params: MethodsProps.GiftsGetParams): Promise<Responses.GiftsGetResponse>;
    /**
     * undefined
     *
     * @param {{
     *   group_id: (number),
     *   title: (string),
     *   address: (string),
     *   additional_address: (string|undefined),
     *   country_id: (number),
     *   city_id: (number),
     *   metro_id: (number|undefined),
     *   latitude: (number),
     *   longitude: (number),
     *   phone: (string|undefined),
     *   work_info_status: (string|undefined),
     *   timetable: (string|undefined),
     *   is_main_address: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsAddAddressResponse>}
     */
    groupsAddAddress(params: MethodsProps.GroupsAddAddressParams): Promise<Responses.GroupsAddAddressResponse>;
    /**
     * undefined
     *
     * @param {{
     *   group_id: (number),
     *   url: (string),
     *   title: (string),
     *   secret_key: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsAddCallbackServerResponse>}
     */
    groupsAddCallbackServer(params: MethodsProps.GroupsAddCallbackServerParams): Promise<Responses.GroupsAddCallbackServerResponse>;
    /**
     * Allows to add a link to the community.
     *
     * @param {{
     *   group_id: (number),
     *   link: (string),
     *   text: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsAddLinkResponse>}
     */
    groupsAddLink(params: MethodsProps.GroupsAddLinkParams): Promise<Responses.GroupsAddLinkResponse>;
    /**
     * Allows to approve join request to the community.
     *
     * @param {{
     *   group_id: (number),
     *   user_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsApproveRequest(params: MethodsProps.GroupsApproveRequestParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   group_id: (number),
     *   owner_id: (number|undefined),
     *   end_date: (number|undefined),
     *   reason: (number|undefined),
     *   comment: (string|undefined),
     *   comment_visible: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsBan(params: MethodsProps.GroupsBanParams): Promise<Responses.OkResponse>;
    /**
     * Creates a new community.
     *
     * @param {{
     *   title: (string),
     *   description: (string|undefined),
     *   type: (string|undefined),
     *   public_category: (number|undefined),
     *   subtype: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsCreateResponse>}
     */
    groupsCreate(params: MethodsProps.GroupsCreateParams): Promise<Responses.GroupsCreateResponse>;
    /**
     * undefined
     *
     * @param {{
     *   group_id: (number),
     *   server_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsDeleteCallbackServer(params: MethodsProps.GroupsDeleteCallbackServerParams): Promise<Responses.OkResponse>;
    /**
     * Allows to delete a link from the community.
     *
     * @param {{
     *   group_id: (number),
     *   link_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsDeleteLink(params: MethodsProps.GroupsDeleteLinkParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   group_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsDisableOnline(params: MethodsProps.GroupsDisableOnlineParams): Promise<Responses.OkResponse>;
    /**
     * Edits a community.
     *
     * @param {{
     *   group_id: (number),
     *   title: (string|undefined),
     *   description: (string|undefined),
     *   screen_name: (string|undefined),
     *   access: (number|undefined),
     *   website: (string|undefined),
     *   subject: (string|undefined),
     *   email: (string|undefined),
     *   phone: (string|undefined),
     *   rss: (string|undefined),
     *   event_start_date: (number|undefined),
     *   event_finish_date: (number|undefined),
     *   event_group_id: (number|undefined),
     *   public_category: (number|undefined),
     *   public_subcategory: (number|undefined),
     *   public_date: (string|undefined),
     *   wall: (number|undefined),
     *   topics: (number|undefined),
     *   photos: (number|undefined),
     *   video: (number|undefined),
     *   audio: (number|undefined),
     *   links: (boolean|undefined),
     *   events: (boolean|undefined),
     *   places: (boolean|undefined),
     *   contacts: (boolean|undefined),
     *   docs: (number|undefined),
     *   wiki: (number|undefined),
     *   messages: (boolean|undefined),
     *   articles: (boolean|undefined),
     *   addresses: (boolean|undefined),
     *   age_limits: (number|undefined),
     *   market: (boolean|undefined),
     *   market_comments: (boolean|undefined),
     *   market_country: (number[]|undefined),
     *   market_city: (number[]|undefined),
     *   market_currency: (number|undefined),
     *   market_contact: (number|undefined),
     *   market_wiki: (number|undefined),
     *   obscene_filter: (boolean|undefined),
     *   obscene_stopwords: (boolean|undefined),
     *   obscene_words: (string[]|undefined),
     *   main_section: (number|undefined),
     *   secondary_section: (number|undefined),
     *   country: (number|undefined),
     *   city: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsEdit(params: MethodsProps.GroupsEditParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   group_id: (number),
     *   address_id: (number),
     *   title: (string|undefined),
     *   address: (string|undefined),
     *   additional_address: (string|undefined),
     *   country_id: (number|undefined),
     *   city_id: (number|undefined),
     *   metro_id: (number|undefined),
     *   latitude: (number|undefined),
     *   longitude: (number|undefined),
     *   phone: (string|undefined),
     *   work_info_status: (string|undefined),
     *   timetable: (string|undefined),
     *   is_main_address: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsEditAddressResponse>}
     */
    groupsEditAddress(params: MethodsProps.GroupsEditAddressParams): Promise<Responses.GroupsEditAddressResponse>;
    /**
     * undefined
     *
     * @param {{
     *   group_id: (number),
     *   server_id: (number),
     *   url: (string),
     *   title: (string),
     *   secret_key: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsEditCallbackServer(params: MethodsProps.GroupsEditCallbackServerParams): Promise<Responses.OkResponse>;
    /**
     * Allows to edit a link in the community.
     *
     * @param {{
     *   group_id: (number),
     *   link_id: (number),
     *   text: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsEditLink(params: MethodsProps.GroupsEditLinkParams): Promise<Responses.OkResponse>;
    /**
     * Allows to add, remove or edit the community manager.
     *
     * @param {{
     *   group_id: (number),
     *   user_id: (number),
     *   role: (string|undefined),
     *   is_contact: (boolean|undefined),
     *   contact_position: (string|undefined),
     *   contact_phone: (string|undefined),
     *   contact_email: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsEditManager(params: MethodsProps.GroupsEditManagerParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   group_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsEnableOnline(params: MethodsProps.GroupsEnableOnlineParams): Promise<Responses.OkResponse>;
    /**
     * Returns a list of the communities to which a user belongs.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   extended: (boolean|undefined),
     *   filter: (Models.GroupsFilter[]|undefined),
     *   fields: (Models.GroupsFields[]|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetResponse>}
     */
    groupsGet(params: MethodsProps.GroupsGetParams): Promise<Responses.GroupsGetResponse>;
    /**
     * Returns a list of community addresses.
     *
     * @param {{
     *   group_id: (number),
     *   address_ids: (number[]|undefined),
     *   latitude: (number|undefined),
     *   longitude: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   fields: (Models.AddressesFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetAddressesResponse>}
     */
    groupsGetAddresses(params: MethodsProps.GroupsGetAddressesParams): Promise<Responses.GroupsGetAddressesResponse>;
    /**
     * Returns a list of users on a community blacklist.
     *
     * @param {{
     *   group_id: (number),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   owner_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetBannedResponse>}
     */
    groupsGetBanned(params: MethodsProps.GroupsGetBannedParams): Promise<Responses.GroupsGetBannedResponse>;
    /**
     * Returns information about communities by their IDs.
     *
     * @param {{
     *   group_ids: (string[]|undefined),
     *   group_id: (string|undefined),
     *   fields: (Models.GroupsFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetByIdResponse>}
     */
    groupsGetById(params: MethodsProps.GroupsGetByIdParams): Promise<Responses.GroupsGetByIdResponse>;
    /**
     * Returns Callback API confirmation code for the community.
     *
     * @param {{
     *   group_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetCallbackConfirmationCodeResponse>}
     */
    groupsGetCallbackConfirmationCode(params: MethodsProps.GroupsGetCallbackConfirmationCodeParams): Promise<Responses.GroupsGetCallbackConfirmationCodeResponse>;
    /**
     * undefined
     *
     * @param {{
     *   group_id: (number),
     *   server_ids: (number[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetCallbackServersResponse>}
     */
    groupsGetCallbackServers(params: MethodsProps.GroupsGetCallbackServersParams): Promise<Responses.GroupsGetCallbackServersResponse>;
    /**
     * Returns [vk.com/dev/callback_api|Callback API] notifications settings.
     *
     * @param {{
     *   group_id: (number),
     *   server_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetCallbackSettingsResponse>}
     */
    groupsGetCallbackSettings(params: MethodsProps.GroupsGetCallbackSettingsParams): Promise<Responses.GroupsGetCallbackSettingsResponse>;
    /**
     * Returns communities list for a catalog category.
     *
     * @param {{
     *   category_id: (number|undefined),
     *   subcategory_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetCatalogResponse>}
     */
    groupsGetCatalog(params: MethodsProps.GroupsGetCatalogParams): Promise<Responses.GroupsGetCatalogResponse>;
    /**
     * Returns categories list for communities catalog
     *
     * @param {{
     *   extended: (boolean|undefined),
     *   subcategories: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetCatalogInfoResponse>}
     */
    groupsGetCatalogInfo(params: MethodsProps.GroupsGetCatalogInfoParams): Promise<Responses.GroupsGetCatalogInfoResponse>;
    /**
     * Returns invited users list of a community
     *
     * @param {{
     *   group_id: (number),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   name_case: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetInvitedUsersResponse>}
     */
    groupsGetInvitedUsers(params: MethodsProps.GroupsGetInvitedUsersParams): Promise<Responses.GroupsGetInvitedUsersResponse>;
    /**
     * Returns a list of invitations to join communities and events.
     *
     * @param {{
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetInvitesResponse>}
     */
    groupsGetInvites(params: MethodsProps.GroupsGetInvitesParams): Promise<Responses.GroupsGetInvitesResponse>;
    /**
     * Returns the data needed to query a Long Poll server for events
     *
     * @param {{
     *   group_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetLongPollServerResponse>}
     */
    groupsGetLongPollServer(params: MethodsProps.GroupsGetLongPollServerParams): Promise<Responses.GroupsGetLongPollServerResponse>;
    /**
     * Returns Long Poll notification settings
     *
     * @param {{
     *   group_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetLongPollSettingsResponse>}
     */
    groupsGetLongPollSettings(params: MethodsProps.GroupsGetLongPollSettingsParams): Promise<Responses.GroupsGetLongPollSettingsResponse>;
    /**
     * Returns a list of community members.
     *
     * @param {{
     *   group_id: (string|undefined),
     *   sort: (string|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   filter: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetMembersResponse>}
     */
    groupsGetMembers(params: MethodsProps.GroupsGetMembersParams): Promise<Responses.GroupsGetMembersResponse>;
    /**
     * Returns a list of requests to the community.
     *
     * @param {{
     *   group_id: (number),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetRequestsResponse>}
     */
    groupsGetRequests(params: MethodsProps.GroupsGetRequestsParams): Promise<Responses.GroupsGetRequestsResponse>;
    /**
     * Returns community settings.
     *
     * @param {{
     *   group_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetSettingsResponse>}
     */
    groupsGetSettings(params: MethodsProps.GroupsGetSettingsParams): Promise<Responses.GroupsGetSettingsResponse>;
    /**
     * undefined
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsGetTokenPermissionsResponse>}
     */
    groupsGetTokenPermissions(params: MethodsProps.GroupsGetTokenPermissionsParams): Promise<Responses.GroupsGetTokenPermissionsResponse>;
    /**
     * Allows to invite friends to the community.
     *
     * @param {{
     *   group_id: (number),
     *   user_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsInvite(params: MethodsProps.GroupsInviteParams): Promise<Responses.OkResponse>;
    /**
     * Returns information specifying whether a user is a member of a community.
     *
     * @param {{
     *   group_id: (string),
     *   user_id: (number|undefined),
     *   user_ids: (number[]|undefined),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsIsMemberResponse>}
     */
    groupsIsMember(params: MethodsProps.GroupsIsMemberParams): Promise<Responses.GroupsIsMemberResponse>;
    /**
     * With this method you can join the group or public page, and also confirm your participation in an event.
     *
     * @param {{
     *   group_id: (number|undefined),
     *   not_sure: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsJoin(params: MethodsProps.GroupsJoinParams): Promise<Responses.OkResponse>;
    /**
     * With this method you can leave a group, public page, or event.
     *
     * @param {{
     *   group_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsLeave(params: MethodsProps.GroupsLeaveParams): Promise<Responses.OkResponse>;
    /**
     * Removes a user from the community.
     *
     * @param {{
     *   group_id: (number),
     *   user_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsRemoveUser(params: MethodsProps.GroupsRemoveUserParams): Promise<Responses.OkResponse>;
    /**
     * Allows to reorder links in the community.
     *
     * @param {{
     *   group_id: (number),
     *   link_id: (number),
     *   after: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsReorderLink(params: MethodsProps.GroupsReorderLinkParams): Promise<Responses.OkResponse>;
    /**
     * Returns a list of communities matching the search criteria.
     *
     * @param {{
     *   q: (string),
     *   type: (string|undefined),
     *   country_id: (number|undefined),
     *   city_id: (number|undefined),
     *   future: (boolean|undefined),
     *   market: (boolean|undefined),
     *   sort: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.GroupsSearchResponse>}
     */
    groupsSearch(params: MethodsProps.GroupsSearchParams): Promise<Responses.GroupsSearchResponse>;
    /**
     * Allow to set notifications settings for group.
     *
     * @param {{
     *   group_id: (number),
     *   server_id: (number|undefined),
     *   api_version: (string|undefined),
     *   message_new: (boolean|undefined),
     *   message_reply: (boolean|undefined),
     *   message_allow: (boolean|undefined),
     *   message_edit: (boolean|undefined),
     *   message_deny: (boolean|undefined),
     *   message_typing_state: (boolean|undefined),
     *   photo_new: (boolean|undefined),
     *   audio_new: (boolean|undefined),
     *   video_new: (boolean|undefined),
     *   wall_reply_new: (boolean|undefined),
     *   wall_reply_edit: (boolean|undefined),
     *   wall_reply_delete: (boolean|undefined),
     *   wall_reply_restore: (boolean|undefined),
     *   wall_post_new: (boolean|undefined),
     *   wall_repost: (boolean|undefined),
     *   board_post_new: (boolean|undefined),
     *   board_post_edit: (boolean|undefined),
     *   board_post_restore: (boolean|undefined),
     *   board_post_delete: (boolean|undefined),
     *   photo_comment_new: (boolean|undefined),
     *   photo_comment_edit: (boolean|undefined),
     *   photo_comment_delete: (boolean|undefined),
     *   photo_comment_restore: (boolean|undefined),
     *   video_comment_new: (boolean|undefined),
     *   video_comment_edit: (boolean|undefined),
     *   video_comment_delete: (boolean|undefined),
     *   video_comment_restore: (boolean|undefined),
     *   market_comment_new: (boolean|undefined),
     *   market_comment_edit: (boolean|undefined),
     *   market_comment_delete: (boolean|undefined),
     *   market_comment_restore: (boolean|undefined),
     *   poll_vote_new: (boolean|undefined),
     *   group_join: (boolean|undefined),
     *   group_leave: (boolean|undefined),
     *   group_change_settings: (boolean|undefined),
     *   group_change_photo: (boolean|undefined),
     *   group_officers_edit: (boolean|undefined),
     *   user_block: (boolean|undefined),
     *   user_unblock: (boolean|undefined),
     *   lead_forms_new: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsSetCallbackSettings(params: MethodsProps.GroupsSetCallbackSettingsParams): Promise<Responses.OkResponse>;
    /**
     * Sets Long Poll notification settings
     *
     * @param {{
     *   group_id: (number),
     *   enabled: (boolean|undefined),
     *   api_version: (string|undefined),
     *   message_new: (boolean|undefined),
     *   message_reply: (boolean|undefined),
     *   message_allow: (boolean|undefined),
     *   message_deny: (boolean|undefined),
     *   message_edit: (boolean|undefined),
     *   message_typing_state: (boolean|undefined),
     *   photo_new: (boolean|undefined),
     *   audio_new: (boolean|undefined),
     *   video_new: (boolean|undefined),
     *   wall_reply_new: (boolean|undefined),
     *   wall_reply_edit: (boolean|undefined),
     *   wall_reply_delete: (boolean|undefined),
     *   wall_reply_restore: (boolean|undefined),
     *   wall_post_new: (boolean|undefined),
     *   wall_repost: (boolean|undefined),
     *   board_post_new: (boolean|undefined),
     *   board_post_edit: (boolean|undefined),
     *   board_post_restore: (boolean|undefined),
     *   board_post_delete: (boolean|undefined),
     *   photo_comment_new: (boolean|undefined),
     *   photo_comment_edit: (boolean|undefined),
     *   photo_comment_delete: (boolean|undefined),
     *   photo_comment_restore: (boolean|undefined),
     *   video_comment_new: (boolean|undefined),
     *   video_comment_edit: (boolean|undefined),
     *   video_comment_delete: (boolean|undefined),
     *   video_comment_restore: (boolean|undefined),
     *   market_comment_new: (boolean|undefined),
     *   market_comment_edit: (boolean|undefined),
     *   market_comment_delete: (boolean|undefined),
     *   market_comment_restore: (boolean|undefined),
     *   poll_vote_new: (boolean|undefined),
     *   group_join: (boolean|undefined),
     *   group_leave: (boolean|undefined),
     *   group_change_settings: (boolean|undefined),
     *   group_change_photo: (boolean|undefined),
     *   group_officers_edit: (boolean|undefined),
     *   user_block: (boolean|undefined),
     *   user_unblock: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsSetLongPollSettings(params: MethodsProps.GroupsSetLongPollSettingsParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   group_id: (number),
     *   owner_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    groupsUnban(params: MethodsProps.GroupsUnbanParams): Promise<Responses.OkResponse>;
    /**
     * Checks if the user can start the lead.
     *
     * @param {{
     *   lead_id: (number),
     *   test_result: (number|undefined),
     *   test_mode: (boolean|undefined),
     *   auto_start: (boolean|undefined),
     *   age: (number|undefined),
     *   country: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.LeadsCheckUserResponse>}
     */
    leadsCheckUser(params: MethodsProps.LeadsCheckUserParams): Promise<Responses.LeadsCheckUserResponse>;
    /**
     * Completes the lead started by user.
     *
     * @param {{
     *   vk_sid: (string),
     *   secret: (string),
     *   comment: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.LeadsCompleteResponse>}
     */
    leadsComplete(params: MethodsProps.LeadsCompleteParams): Promise<Responses.LeadsCompleteResponse>;
    /**
     * Returns lead stats data.
     *
     * @param {{
     *   lead_id: (number),
     *   secret: (string|undefined),
     *   date_start: (string|undefined),
     *   date_end: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.LeadsGetStatsResponse>}
     */
    leadsGetStats(params: MethodsProps.LeadsGetStatsParams): Promise<Responses.LeadsGetStatsResponse>;
    /**
     * Returns a list of last user actions for the offer.
     *
     * @param {{
     *   offer_id: (number),
     *   secret: (string),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   status: (number|undefined),
     *   reverse: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.LeadsGetUsersResponse>}
     */
    leadsGetUsers(params: MethodsProps.LeadsGetUsersParams): Promise<Responses.LeadsGetUsersResponse>;
    /**
     * Counts the metric event.
     *
     * @param {{
     *   data: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.LeadsMetricHitResponse>}
     */
    leadsMetricHit(params: MethodsProps.LeadsMetricHitParams): Promise<Responses.LeadsMetricHitResponse>;
    /**
     * Creates new session for the user passing the offer.
     *
     * @param {{
     *   lead_id: (number),
     *   secret: (string),
     *   uid: (number|undefined),
     *   aid: (number|undefined),
     *   test_mode: (boolean|undefined),
     *   force: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.LeadsStartResponse>}
     */
    leadsStart(params: MethodsProps.LeadsStartParams): Promise<Responses.LeadsStartResponse>;
    /**
     * Adds the specified object to the 'Likes' list of the current user.
     *
     * @param {{
     *   type: (string),
     *   owner_id: (number|undefined),
     *   item_id: (number),
     *   access_key: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.LikesAddResponse>}
     */
    likesAdd(params: MethodsProps.LikesAddParams): Promise<Responses.LikesAddResponse>;
    /**
     * Deletes the specified object from the 'Likes' list of the current user.
     *
     * @param {{
     *   type: (string),
     *   owner_id: (number|undefined),
     *   item_id: (number),
     *   access_key: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.LikesDeleteResponse>}
     */
    likesDelete(params: MethodsProps.LikesDeleteParams): Promise<Responses.LikesDeleteResponse>;
    /**
     * Returns a list of IDs of users who added the specified object to their 'Likes' list.
     *
     * @param {{
     *   type: (string),
     *   owner_id: (number|undefined),
     *   item_id: (number|undefined),
     *   page_url: (string|undefined),
     *   filter: (string|undefined),
     *   friends_only: (number|undefined),
     *   extended: (boolean|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   skip_own: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.LikesGetListResponse>}
     */
    likesGetList(params: MethodsProps.LikesGetListParams): Promise<Responses.LikesGetListResponse>;
    /**
     * Checks for the object in the 'Likes' list of the specified user.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   type: (string),
     *   owner_id: (number|undefined),
     *   item_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.LikesIsLikedResponse>}
     */
    likesIsLiked(params: MethodsProps.LikesIsLikedParams): Promise<Responses.LikesIsLikedResponse>;
    /**
     * Ads a new item to the market.
     *
     * @param {{
     *   owner_id: (number),
     *   name: (string),
     *   description: (string),
     *   category_id: (number),
     *   price: (number|undefined),
     *   old_price: (number|undefined),
     *   deleted: (boolean|undefined),
     *   main_photo_id: (number),
     *   photo_ids: (number[]|undefined),
     *   url: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MarketAddResponse>}
     */
    marketAdd(params: MethodsProps.MarketAddParams): Promise<Responses.MarketAddResponse>;
    /**
     * Creates new collection of items
     *
     * @param {{
     *   owner_id: (number),
     *   title: (string),
     *   photo_id: (number|undefined),
     *   main_album: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MarketAddAlbumResponse>}
     */
    marketAddAlbum(params: MethodsProps.MarketAddAlbumParams): Promise<Responses.MarketAddAlbumResponse>;
    /**
     * Adds an item to one or multiple collections.
     *
     * @param {{
     *   owner_id: (number),
     *   item_id: (number),
     *   album_ids: (number[]),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    marketAddToAlbum(params: MethodsProps.MarketAddToAlbumParams): Promise<Responses.OkResponse>;
    /**
     * Creates a new comment for an item.
     *
     * @param {{
     *   owner_id: (number),
     *   item_id: (number),
     *   message: (string|undefined),
     *   attachments: (string[]|undefined),
     *   from_group: (boolean|undefined),
     *   reply_to_comment: (number|undefined),
     *   sticker_id: (number|undefined),
     *   guid: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MarketCreateCommentResponse>}
     */
    marketCreateComment(params: MethodsProps.MarketCreateCommentParams): Promise<Responses.MarketCreateCommentResponse>;
    /**
     * Deletes an item.
     *
     * @param {{
     *   owner_id: (number),
     *   item_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    marketDelete(params: MethodsProps.MarketDeleteParams): Promise<Responses.OkResponse>;
    /**
     * Deletes a collection of items.
     *
     * @param {{
     *   owner_id: (number),
     *   album_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    marketDeleteAlbum(params: MethodsProps.MarketDeleteAlbumParams): Promise<Responses.OkResponse>;
    /**
     * Deletes an item's comment
     *
     * @param {{
     *   owner_id: (number),
     *   comment_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MarketDeleteCommentResponse>}
     */
    marketDeleteComment(params: MethodsProps.MarketDeleteCommentParams): Promise<Responses.MarketDeleteCommentResponse>;
    /**
     * Edits an item.
     *
     * @param {{
     *   owner_id: (number),
     *   item_id: (number),
     *   name: (string),
     *   description: (string),
     *   category_id: (number),
     *   price: (number),
     *   deleted: (boolean|undefined),
     *   main_photo_id: (number),
     *   photo_ids: (number[]|undefined),
     *   url: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    marketEdit(params: MethodsProps.MarketEditParams): Promise<Responses.OkResponse>;
    /**
     * Edits a collection of items
     *
     * @param {{
     *   owner_id: (number),
     *   album_id: (number),
     *   title: (string),
     *   photo_id: (number|undefined),
     *   main_album: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    marketEditAlbum(params: MethodsProps.MarketEditAlbumParams): Promise<Responses.OkResponse>;
    /**
     * Chages item comment's text
     *
     * @param {{
     *   owner_id: (number),
     *   comment_id: (number),
     *   message: (string|undefined),
     *   attachments: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    marketEditComment(params: MethodsProps.MarketEditCommentParams): Promise<Responses.OkResponse>;
    /**
     * Returns items list for a community.
     *
     * @param {{
     *   owner_id: (number),
     *   album_id: (number|undefined),
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MarketGetResponse>}
     */
    marketGet(params: MethodsProps.MarketGetParams): Promise<Responses.MarketGetResponse>;
    /**
     * Returns items album's data
     *
     * @param {{
     *   owner_id: (number),
     *   album_ids: (number[]),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MarketGetAlbumByIdResponse>}
     */
    marketGetAlbumById(params: MethodsProps.MarketGetAlbumByIdParams): Promise<Responses.MarketGetAlbumByIdResponse>;
    /**
     * Returns community's collections list.
     *
     * @param {{
     *   owner_id: (number),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MarketGetAlbumsResponse>}
     */
    marketGetAlbums(params: MethodsProps.MarketGetAlbumsParams): Promise<Responses.MarketGetAlbumsResponse>;
    /**
     * Returns information about market items by their ids.
     *
     * @param {{
     *   item_ids: (string[]),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MarketGetByIdResponse>}
     */
    marketGetById(params: MethodsProps.MarketGetByIdParams): Promise<Responses.MarketGetByIdResponse>;
    /**
     * Returns a list of market categories.
     *
     * @param {{
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MarketGetCategoriesResponse>}
     */
    marketGetCategories(params: MethodsProps.MarketGetCategoriesParams): Promise<Responses.MarketGetCategoriesResponse>;
    /**
     * Returns comments list for an item.
     *
     * @param {{
     *   owner_id: (number),
     *   item_id: (number),
     *   need_likes: (boolean|undefined),
     *   start_comment_id: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   sort: (string|undefined),
     *   extended: (boolean|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MarketGetCommentsResponse>}
     */
    marketGetComments(params: MethodsProps.MarketGetCommentsParams): Promise<Responses.MarketGetCommentsResponse>;
    /**
     * Removes an item from one or multiple collections.
     *
     * @param {{
     *   owner_id: (number),
     *   item_id: (number),
     *   album_ids: (number[]),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    marketRemoveFromAlbum(params: MethodsProps.MarketRemoveFromAlbumParams): Promise<Responses.OkResponse>;
    /**
     * Reorders the collections list.
     *
     * @param {{
     *   owner_id: (number),
     *   album_id: (number),
     *   before: (number|undefined),
     *   after: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    marketReorderAlbums(params: MethodsProps.MarketReorderAlbumsParams): Promise<Responses.OkResponse>;
    /**
     * Changes item place in a collection.
     *
     * @param {{
     *   owner_id: (number),
     *   album_id: (number|undefined),
     *   item_id: (number),
     *   before: (number|undefined),
     *   after: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    marketReorderItems(params: MethodsProps.MarketReorderItemsParams): Promise<Responses.OkResponse>;
    /**
     * Sends a complaint to the item.
     *
     * @param {{
     *   owner_id: (number),
     *   item_id: (number),
     *   reason: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    marketReport(params: MethodsProps.MarketReportParams): Promise<Responses.OkResponse>;
    /**
     * Sends a complaint to the item's comment.
     *
     * @param {{
     *   owner_id: (number),
     *   comment_id: (number),
     *   reason: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    marketReportComment(params: MethodsProps.MarketReportCommentParams): Promise<Responses.OkResponse>;
    /**
     * Restores recently deleted item
     *
     * @param {{
     *   owner_id: (number),
     *   item_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    marketRestore(params: MethodsProps.MarketRestoreParams): Promise<Responses.OkResponse>;
    /**
     * Restores a recently deleted comment
     *
     * @param {{
     *   owner_id: (number),
     *   comment_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MarketRestoreCommentResponse>}
     */
    marketRestoreComment(params: MethodsProps.MarketRestoreCommentParams): Promise<Responses.MarketRestoreCommentResponse>;
    /**
     * Searches market items in a community's catalog
     *
     * @param {{
     *   owner_id: (number),
     *   album_id: (number|undefined),
     *   q: (string|undefined),
     *   price_from: (number|undefined),
     *   price_to: (number|undefined),
     *   tags: (number[]|undefined),
     *   sort: (number|undefined),
     *   rev: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   extended: (boolean|undefined),
     *   status: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MarketSearchResponse>}
     */
    marketSearch(params: MethodsProps.MarketSearchParams): Promise<Responses.MarketSearchResponse>;
    /**
     * Adds a new user to a chat.
     *
     * @param {{
     *   chat_id: (number),
     *   user_id: (number|undefined),
     *   visible_messages_count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    messagesAddChatUser(params: MethodsProps.MessagesAddChatUserParams): Promise<Responses.OkResponse>;
    /**
     * Allows sending messages from community to the current user.
     *
     * @param {{
     *   group_id: (number),
     *   key: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    messagesAllowMessagesFromGroup(params: MethodsProps.MessagesAllowMessagesFromGroupParams): Promise<Responses.OkResponse>;
    /**
     * Creates a chat with several participants.
     *
     * @param {{
     *   user_ids: (number[]|undefined),
     *   title: (string|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesCreateChatResponse>}
     */
    messagesCreateChat(params: MethodsProps.MessagesCreateChatParams): Promise<Responses.MessagesCreateChatResponse>;
    /**
     * Deletes one or more messages.
     *
     * @param {{
     *   message_ids: (number[]|undefined),
     *   spam: (boolean|undefined),
     *   group_id: (number|undefined),
     *   delete_for_all: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesDeleteResponse>}
     */
    messagesDelete(params: MethodsProps.MessagesDeleteParams): Promise<Responses.MessagesDeleteResponse>;
    /**
     * Deletes a chat's cover picture.
     *
     * @param {{
     *   chat_id: (number),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesDeleteChatPhotoResponse>}
     */
    messagesDeleteChatPhoto(params: MethodsProps.MessagesDeleteChatPhotoParams): Promise<Responses.MessagesDeleteChatPhotoResponse>;
    /**
     * Deletes all private messages in a conversation.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   peer_id: (number|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesDeleteConversationResponse>}
     */
    messagesDeleteConversation(params: MethodsProps.MessagesDeleteConversationParams): Promise<Responses.MessagesDeleteConversationResponse>;
    /**
     * Denies sending message from community to the current user.
     *
     * @param {{
     *   group_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    messagesDenyMessagesFromGroup(params: MethodsProps.MessagesDenyMessagesFromGroupParams): Promise<Responses.OkResponse>;
    /**
     * Edits the message.
     *
     * @param {{
     *   peer_id: (number),
     *   message: (string|undefined),
     *   lat: (number|undefined),
     *   long: (number|undefined),
     *   attachment: (string|undefined),
     *   keep_forward_messages: (boolean|undefined),
     *   keep_snippets: (boolean|undefined),
     *   group_id: (number|undefined),
     *   dont_parse_links: (boolean|undefined),
     *   message_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesEditResponse>}
     */
    messagesEdit(params: MethodsProps.MessagesEditParams): Promise<Responses.MessagesEditResponse>;
    /**
     * Edits the title of a chat.
     *
     * @param {{
     *   chat_id: (number),
     *   title: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    messagesEditChat(params: MethodsProps.MessagesEditChatParams): Promise<Responses.OkResponse>;
    /**
     * Returns messages by their IDs within the conversation.
     *
     * @param {{
     *   peer_id: (number),
     *   conversation_message_ids: (number[]),
     *   extended: (boolean|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesGetByConversationMessageIdResponse>}
     */
    messagesGetByConversationMessageId(params: MethodsProps.MessagesGetByConversationMessageIdParams): Promise<Responses.MessagesGetByConversationMessageIdResponse>;
    /**
     * Returns messages by their IDs.
     *
     * @param {{
     *   message_ids: (number[]),
     *   preview_length: (number|undefined),
     *   extended: (boolean|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesGetByIdResponse>}
     */
    messagesGetById(params: MethodsProps.MessagesGetByIdParams): Promise<Responses.MessagesGetByIdResponse>;
    /**
     * undefined
     *
     * @param {{
     *   peer_id: (number|undefined),
     *   link: (string|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesGetChatPreviewResponse>}
     */
    messagesGetChatPreview(params: MethodsProps.MessagesGetChatPreviewParams): Promise<Responses.MessagesGetChatPreviewResponse>;
    /**
     * Returns a list of IDs of users participating in a chat.
     *
     * @param {{
     *   peer_id: (number),
     *   fields: (Models.UsersFields[]|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesGetConversationMembersResponse>}
     */
    messagesGetConversationMembers(params: MethodsProps.MessagesGetConversationMembersParams): Promise<Responses.MessagesGetConversationMembersResponse>;
    /**
     * Returns a list of the current user's conversations.
     *
     * @param {{
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   filter: (string|undefined),
     *   extended: (boolean|undefined),
     *   start_message_id: (number|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesGetConversationsResponse>}
     */
    messagesGetConversations(params: MethodsProps.MessagesGetConversationsParams): Promise<Responses.MessagesGetConversationsResponse>;
    /**
     * Returns conversations by their IDs
     *
     * @param {{
     *   peer_ids: (number[]),
     *   extended: (boolean|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesGetConversationsByIdResponse>}
     */
    messagesGetConversationsById(params: MethodsProps.MessagesGetConversationsByIdParams): Promise<Responses.MessagesGetConversationsByIdResponse>;
    /**
     * Returns message history for the specified user or group chat.
     *
     * @param {{
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   user_id: (number|undefined),
     *   peer_id: (number|undefined),
     *   start_message_id: (number|undefined),
     *   rev: (number|undefined),
     *   extended: (boolean|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesGetHistoryResponse>}
     */
    messagesGetHistory(params: MethodsProps.MessagesGetHistoryParams): Promise<Responses.MessagesGetHistoryResponse>;
    /**
     * Returns media files from the dialog or group chat.
     *
     * @param {{
     *   peer_id: (number),
     *   media_type: (string|undefined),
     *   start_from: (string|undefined),
     *   count: (number|undefined),
     *   photo_sizes: (boolean|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   group_id: (number|undefined),
     *   preserve_order: (boolean|undefined),
     *   max_forwards_level: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesGetHistoryAttachmentsResponse>}
     */
    messagesGetHistoryAttachments(params: MethodsProps.MessagesGetHistoryAttachmentsParams): Promise<Responses.MessagesGetHistoryAttachmentsResponse>;
    /**
     * undefined
     *
     * @param {{
     *   peer_id: (number),
     *   reset: (boolean|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesGetInviteLinkResponse>}
     */
    messagesGetInviteLink(params: MethodsProps.MessagesGetInviteLinkParams): Promise<Responses.MessagesGetInviteLinkResponse>;
    /**
     * Returns a user's current status and date of last activity.
     *
     * @param {{
     *   user_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesGetLastActivityResponse>}
     */
    messagesGetLastActivity(params: MethodsProps.MessagesGetLastActivityParams): Promise<Responses.MessagesGetLastActivityResponse>;
    /**
     * Returns updates in user's private messages.
     *
     * @param {{
     *   ts: (number|undefined),
     *   pts: (number|undefined),
     *   preview_length: (number|undefined),
     *   onlines: (boolean|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   events_limit: (number|undefined),
     *   msgs_limit: (number|undefined),
     *   max_msg_id: (number|undefined),
     *   group_id: (number|undefined),
     *   lp_version: (number|undefined),
     *   last_n: (number|undefined),
     *   credentials: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesGetLongPollHistoryResponse>}
     */
    messagesGetLongPollHistory(params: MethodsProps.MessagesGetLongPollHistoryParams): Promise<Responses.MessagesGetLongPollHistoryResponse>;
    /**
     * Returns data required for connection to a Long Poll server.
     *
     * @param {{
     *   need_pts: (boolean|undefined),
     *   group_id: (number|undefined),
     *   lp_version: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesGetLongPollServerResponse>}
     */
    messagesGetLongPollServer(params: MethodsProps.MessagesGetLongPollServerParams): Promise<Responses.MessagesGetLongPollServerResponse>;
    /**
     * Returns information whether sending messages from the community to current user is allowed.
     *
     * @param {{
     *   group_id: (number),
     *   user_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesIsMessagesFromGroupAllowedResponse>}
     */
    messagesIsMessagesFromGroupAllowed(params: MethodsProps.MessagesIsMessagesFromGroupAllowedParams): Promise<Responses.MessagesIsMessagesFromGroupAllowedResponse>;
    /**
     * undefined
     *
     * @param {{
     *   link: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesJoinChatByInviteLinkResponse>}
     */
    messagesJoinChatByInviteLink(params: MethodsProps.MessagesJoinChatByInviteLinkParams): Promise<Responses.MessagesJoinChatByInviteLinkResponse>;
    /**
     * Marks and unmarks conversations as unanswered.
     *
     * @param {{
     *   peer_id: (number),
     *   answered: (boolean|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    messagesMarkAsAnsweredConversation(params: MethodsProps.MessagesMarkAsAnsweredConversationParams): Promise<Responses.OkResponse>;
    /**
     * Marks and unmarks messages as important (starred).
     *
     * @param {{
     *   message_ids: (number[]|undefined),
     *   important: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesMarkAsImportantResponse>}
     */
    messagesMarkAsImportant(params: MethodsProps.MessagesMarkAsImportantParams): Promise<Responses.MessagesMarkAsImportantResponse>;
    /**
     * Marks and unmarks conversations as important.
     *
     * @param {{
     *   peer_id: (number),
     *   important: (boolean|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    messagesMarkAsImportantConversation(params: MethodsProps.MessagesMarkAsImportantConversationParams): Promise<Responses.OkResponse>;
    /**
     * Marks messages as read.
     *
     * @param {{
     *   message_ids: (number[]|undefined),
     *   peer_id: (number|undefined),
     *   start_message_id: (number|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    messagesMarkAsRead(params: MethodsProps.MessagesMarkAsReadParams): Promise<Responses.OkResponse>;
    /**
     * Pin a message.
     *
     * @param {{
     *   peer_id: (number),
     *   message_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesPinResponse>}
     */
    messagesPin(params: MethodsProps.MessagesPinParams): Promise<Responses.MessagesPinResponse>;
    /**
     * Allows the current user to leave a chat or, if the current user started the chat, allows the user to remove another user from the chat.
     *
     * @param {{
     *   chat_id: (number),
     *   user_id: (number|undefined),
     *   member_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    messagesRemoveChatUser(params: MethodsProps.MessagesRemoveChatUserParams): Promise<Responses.OkResponse>;
    /**
     * Restores a deleted message.
     *
     * @param {{
     *   message_id: (number),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    messagesRestore(params: MethodsProps.MessagesRestoreParams): Promise<Responses.OkResponse>;
    /**
     * Returns a list of the current user's private messages that match search criteria.
     *
     * @param {{
     *   q: (string|undefined),
     *   peer_id: (number|undefined),
     *   date: (number|undefined),
     *   preview_length: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   extended: (boolean|undefined),
     *   fields: (string[]|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesSearchResponse>}
     */
    messagesSearch(params: MethodsProps.MessagesSearchParams): Promise<Responses.MessagesSearchResponse>;
    /**
     * Returns a list of the current user's conversations that match search criteria.
     *
     * @param {{
     *   q: (string|undefined),
     *   count: (number|undefined),
     *   extended: (boolean|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesSearchConversationsResponse>}
     */
    messagesSearchConversations(params: MethodsProps.MessagesSearchConversationsParams): Promise<Responses.MessagesSearchConversationsResponse>;
    /**
     * Sends a message.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   random_id: (number|undefined),
     *   peer_id: (number|undefined),
     *   domain: (string|undefined),
     *   chat_id: (number|undefined),
     *   user_ids: (number[]|undefined),
     *   message: (string|undefined),
     *   lat: (number|undefined),
     *   long: (number|undefined),
     *   attachment: (string|undefined),
     *   reply_to: (number|undefined),
     *   forward_messages: (number[]|undefined),
     *   sticker_id: (number|undefined),
     *   group_id: (number|undefined),
     *   keyboard: (string|undefined),
     *   payload: (string|undefined),
     *   dont_parse_links: (boolean|undefined),
     *   disable_mentions: (boolean|undefined),
     *   intent: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesSendResponse>}
     */
    messagesSend(params: MethodsProps.MessagesSendParams): Promise<Responses.MessagesSendResponse>;
    /**
     * Changes the status of a user as typing in a conversation.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   type: (string|undefined),
     *   peer_id: (number|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    messagesSetActivity(params: MethodsProps.MessagesSetActivityParams): Promise<Responses.OkResponse>;
    /**
     * Sets a previously-uploaded picture as the cover picture of a chat.
     *
     * @param {{
     *   file: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.MessagesSetChatPhotoResponse>}
     */
    messagesSetChatPhoto(params: MethodsProps.MessagesSetChatPhotoParams): Promise<Responses.MessagesSetChatPhotoResponse>;
    /**
     * undefined
     *
     * @param {{
     *   peer_id: (number),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    messagesUnpin(params: MethodsProps.MessagesUnpinParams): Promise<Responses.OkResponse>;
    /**
     * Prevents news from specified users and communities from appearing in the current user's newsfeed.
     *
     * @param {{
     *   user_ids: (number[]|undefined),
     *   group_ids: (number[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    newsfeedAddBan(params: MethodsProps.NewsfeedAddBanParams): Promise<Responses.OkResponse>;
    /**
     * Allows news from previously banned users and communities to be shown in the current user's newsfeed.
     *
     * @param {{
     *   user_ids: (number[]|undefined),
     *   group_ids: (number[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    newsfeedDeleteBan(params: MethodsProps.NewsfeedDeleteBanParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   list_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    newsfeedDeleteList(params: MethodsProps.NewsfeedDeleteListParams): Promise<Responses.OkResponse>;
    /**
     * Returns data required to show newsfeed for the current user.
     *
     * @param {{
     *   filters: (Models.NewsfeedFilters[]|undefined),
     *   return_banned: (boolean|undefined),
     *   start_time: (number|undefined),
     *   end_time: (number|undefined),
     *   max_photos: (number|undefined),
     *   source_ids: (string|undefined),
     *   start_from: (string|undefined),
     *   count: (number|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   section: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NewsfeedGetResponse>}
     */
    newsfeedGet(params: MethodsProps.NewsfeedGetParams): Promise<Responses.NewsfeedGetResponse>;
    /**
     * Returns a list of users and communities banned from the current user's newsfeed.
     *
     * @param {{
     *   extended: (boolean|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   name_case: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NewsfeedGetBannedResponse>}
     */
    newsfeedGetBanned(params: MethodsProps.NewsfeedGetBannedParams): Promise<Responses.NewsfeedGetBannedResponse>;
    /**
     * Returns a list of comments in the current user's newsfeed.
     *
     * @param {{
     *   count: (number|undefined),
     *   filters: (Models.NewsfeedCommentsFilters[]|undefined),
     *   reposts: (string|undefined),
     *   start_time: (number|undefined),
     *   end_time: (number|undefined),
     *   last_comments_count: (number|undefined),
     *   start_from: (string|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NewsfeedGetCommentsResponse>}
     */
    newsfeedGetComments(params: MethodsProps.NewsfeedGetCommentsParams): Promise<Responses.NewsfeedGetCommentsResponse>;
    /**
     * Returns a list of newsfeeds followed by the current user.
     *
     * @param {{
     *   list_ids: (number[]|undefined),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NewsfeedGetListsResponse>}
     */
    newsfeedGetLists(params: MethodsProps.NewsfeedGetListsParams): Promise<Responses.NewsfeedGetListsResponse>;
    /**
     * Returns a list of posts on user walls in which the current user is mentioned.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   start_time: (number|undefined),
     *   end_time: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NewsfeedGetMentionsResponse>}
     */
    newsfeedGetMentions(params: MethodsProps.NewsfeedGetMentionsParams): Promise<Responses.NewsfeedGetMentionsResponse>;
    /**
     * , Returns a list of newsfeeds recommended to the current user.
     *
     * @param {{
     *   start_time: (number|undefined),
     *   end_time: (number|undefined),
     *   max_photos: (number|undefined),
     *   start_from: (string|undefined),
     *   count: (number|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NewsfeedGetRecommendedResponse>}
     */
    newsfeedGetRecommended(params: MethodsProps.NewsfeedGetRecommendedParams): Promise<Responses.NewsfeedGetRecommendedResponse>;
    /**
     * Returns communities and users that current user is suggested to follow.
     *
     * @param {{
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   shuffle: (boolean|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NewsfeedGetSuggestedSourcesResponse>}
     */
    newsfeedGetSuggestedSources(params: MethodsProps.NewsfeedGetSuggestedSourcesParams): Promise<Responses.NewsfeedGetSuggestedSourcesResponse>;
    /**
     * Hides an item from the newsfeed.
     *
     * @param {{
     *   type: (string),
     *   owner_id: (number),
     *   item_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    newsfeedIgnoreItem(params: MethodsProps.NewsfeedIgnoreItemParams): Promise<Responses.OkResponse>;
    /**
     * Creates and edits user newsfeed lists
     *
     * @param {{
     *   list_id: (number|undefined),
     *   title: (string),
     *   source_ids: (number[]|undefined),
     *   no_reposts: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NewsfeedSaveListResponse>}
     */
    newsfeedSaveList(params: MethodsProps.NewsfeedSaveListParams): Promise<Responses.NewsfeedSaveListResponse>;
    /**
     * Returns search results by statuses.
     *
     * @param {{
     *   q: (string|undefined),
     *   extended: (boolean|undefined),
     *   count: (number|undefined),
     *   latitude: (number|undefined),
     *   longitude: (number|undefined),
     *   start_time: (number|undefined),
     *   end_time: (number|undefined),
     *   start_from: (string|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NewsfeedSearchResponse>}
     */
    newsfeedSearch(params: MethodsProps.NewsfeedSearchParams): Promise<Responses.NewsfeedSearchResponse>;
    /**
     * Returns a hidden item to the newsfeed.
     *
     * @param {{
     *   type: (string),
     *   owner_id: (number),
     *   item_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    newsfeedUnignoreItem(params: MethodsProps.NewsfeedUnignoreItemParams): Promise<Responses.OkResponse>;
    /**
     * Unsubscribes the current user from specified newsfeeds.
     *
     * @param {{
     *   type: (string),
     *   owner_id: (number|undefined),
     *   item_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    newsfeedUnsubscribe(params: MethodsProps.NewsfeedUnsubscribeParams): Promise<Responses.OkResponse>;
    /**
     * Creates a new note for the current user.
     *
     * @param {{
     *   title: (string),
     *   text: (string),
     *   privacy_view: (string[]|undefined),
     *   privacy_comment: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NotesAddResponse>}
     */
    notesAdd(params: MethodsProps.NotesAddParams): Promise<Responses.NotesAddResponse>;
    /**
     * Adds a new comment on a note.
     *
     * @param {{
     *   note_id: (number),
     *   owner_id: (number|undefined),
     *   reply_to: (number|undefined),
     *   message: (string),
     *   guid: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NotesCreateCommentResponse>}
     */
    notesCreateComment(params: MethodsProps.NotesCreateCommentParams): Promise<Responses.NotesCreateCommentResponse>;
    /**
     * Deletes a note of the current user.
     *
     * @param {{
     *   note_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    notesDelete(params: MethodsProps.NotesDeleteParams): Promise<Responses.OkResponse>;
    /**
     * Deletes a comment on a note.
     *
     * @param {{
     *   comment_id: (number),
     *   owner_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    notesDeleteComment(params: MethodsProps.NotesDeleteCommentParams): Promise<Responses.OkResponse>;
    /**
     * Edits a note of the current user.
     *
     * @param {{
     *   note_id: (number),
     *   title: (string),
     *   text: (string),
     *   privacy_view: (string[]|undefined),
     *   privacy_comment: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    notesEdit(params: MethodsProps.NotesEditParams): Promise<Responses.OkResponse>;
    /**
     * Edits a comment on a note.
     *
     * @param {{
     *   comment_id: (number),
     *   owner_id: (number|undefined),
     *   message: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    notesEditComment(params: MethodsProps.NotesEditCommentParams): Promise<Responses.OkResponse>;
    /**
     * Returns a list of notes created by a user.
     *
     * @param {{
     *   note_ids: (number[]|undefined),
     *   user_id: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   sort: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NotesGetResponse>}
     */
    notesGet(params: MethodsProps.NotesGetParams): Promise<Responses.NotesGetResponse>;
    /**
     * Returns a note by its ID.
     *
     * @param {{
     *   note_id: (number),
     *   owner_id: (number|undefined),
     *   need_wiki: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NotesGetByIdResponse>}
     */
    notesGetById(params: MethodsProps.NotesGetByIdParams): Promise<Responses.NotesGetByIdResponse>;
    /**
     * Returns a list of comments on a note.
     *
     * @param {{
     *   note_id: (number),
     *   owner_id: (number|undefined),
     *   sort: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NotesGetCommentsResponse>}
     */
    notesGetComments(params: MethodsProps.NotesGetCommentsParams): Promise<Responses.NotesGetCommentsResponse>;
    /**
     * Restores a deleted comment on a note.
     *
     * @param {{
     *   comment_id: (number),
     *   owner_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    notesRestoreComment(params: MethodsProps.NotesRestoreCommentParams): Promise<Responses.OkResponse>;
    /**
     * Returns a list of notifications about other users' feedback to the current user's wall posts.
     *
     * @param {{
     *   count: (number|undefined),
     *   start_from: (string|undefined),
     *   filters: (string[]|undefined),
     *   start_time: (number|undefined),
     *   end_time: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NotificationsGetResponse>}
     */
    notificationsGet(params: MethodsProps.NotificationsGetParams): Promise<Responses.NotificationsGetResponse>;
    /**
     * Resets the counter of new notifications about other users' feedback to the current user's wall posts.
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NotificationsMarkAsViewedResponse>}
     */
    notificationsMarkAsViewed(params: MethodsProps.NotificationsMarkAsViewedParams): Promise<Responses.NotificationsMarkAsViewedResponse>;
    /**
     * undefined
     *
     * @param {{
     *   user_ids: (number[]),
     *   message: (string),
     *   fragment: (string|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.NotificationsSendMessageResponse>}
     */
    notificationsSendMessage(params: MethodsProps.NotificationsSendMessageParams): Promise<Responses.NotificationsSendMessageResponse>;
    /**
     * undefined
     *
     * @param {{
     *   user_id: (number),
     *   subscription_id: (number),
     *   pending_cancel: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OrdersCancelSubscriptionResponse>}
     */
    ordersCancelSubscription(params: MethodsProps.OrdersCancelSubscriptionParams): Promise<Responses.OrdersCancelSubscriptionResponse>;
    /**
     * Changes order status.
     *
     * @param {{
     *   order_id: (number),
     *   action: (string),
     *   app_order_id: (number|undefined),
     *   test_mode: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OrdersChangeStateResponse>}
     */
    ordersChangeState(params: MethodsProps.OrdersChangeStateParams): Promise<Responses.OrdersChangeStateResponse>;
    /**
     * Returns a list of orders.
     *
     * @param {{
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   test_mode: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OrdersGetResponse>}
     */
    ordersGet(params: MethodsProps.OrdersGetParams): Promise<Responses.OrdersGetResponse>;
    /**
     * undefined
     *
     * @param {{
     *   user_id: (number),
     *   votes: (string[]),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OrdersGetAmountResponse>}
     */
    ordersGetAmount(params: MethodsProps.OrdersGetAmountParams): Promise<Responses.OrdersGetAmountResponse>;
    /**
     * Returns information about orders by their IDs.
     *
     * @param {{
     *   order_id: (number|undefined),
     *   order_ids: (number[]|undefined),
     *   test_mode: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OrdersGetByIdResponse>}
     */
    ordersGetById(params: MethodsProps.OrdersGetByIdParams): Promise<Responses.OrdersGetByIdResponse>;
    /**
     * undefined
     *
     * @param {{
     *   user_id: (number),
     *   subscription_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OrdersGetUserSubscriptionByIdResponse>}
     */
    ordersGetUserSubscriptionById(params: MethodsProps.OrdersGetUserSubscriptionByIdParams): Promise<Responses.OrdersGetUserSubscriptionByIdResponse>;
    /**
     * undefined
     *
     * @param {{
     *   user_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OrdersGetUserSubscriptionsResponse>}
     */
    ordersGetUserSubscriptions(params: MethodsProps.OrdersGetUserSubscriptionsParams): Promise<Responses.OrdersGetUserSubscriptionsResponse>;
    /**
     * undefined
     *
     * @param {{
     *   user_id: (number),
     *   subscription_id: (number),
     *   price: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OrdersUpdateSubscriptionResponse>}
     */
    ordersUpdateSubscription(params: MethodsProps.OrdersUpdateSubscriptionParams): Promise<Responses.OrdersUpdateSubscriptionResponse>;
    /**
     * Allows to clear the cache of particular 'external' pages which may be attached to VK posts.
     *
     * @param {{
     *   url: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    pagesClearCache(params: MethodsProps.PagesClearCacheParams): Promise<Responses.OkResponse>;
    /**
     * Returns information about a wiki page.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   page_id: (number|undefined),
     *   global: (boolean|undefined),
     *   site_preview: (boolean|undefined),
     *   title: (string|undefined),
     *   need_source: (boolean|undefined),
     *   need_html: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PagesGetResponse>}
     */
    pagesGet(params: MethodsProps.PagesGetParams): Promise<Responses.PagesGetResponse>;
    /**
     * Returns a list of all previous versions of a wiki page.
     *
     * @param {{
     *   page_id: (number),
     *   group_id: (number|undefined),
     *   user_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PagesGetHistoryResponse>}
     */
    pagesGetHistory(params: MethodsProps.PagesGetHistoryParams): Promise<Responses.PagesGetHistoryResponse>;
    /**
     * Returns a list of wiki pages in a group.
     *
     * @param {{
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PagesGetTitlesResponse>}
     */
    pagesGetTitles(params: MethodsProps.PagesGetTitlesParams): Promise<Responses.PagesGetTitlesResponse>;
    /**
     * Returns the text of one of the previous versions of a wiki page.
     *
     * @param {{
     *   version_id: (number),
     *   group_id: (number|undefined),
     *   user_id: (number|undefined),
     *   need_html: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PagesGetVersionResponse>}
     */
    pagesGetVersion(params: MethodsProps.PagesGetVersionParams): Promise<Responses.PagesGetVersionResponse>;
    /**
     * Returns HTML representation of the wiki markup.
     *
     * @param {{
     *   text: (string),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PagesParseWikiResponse>}
     */
    pagesParseWiki(params: MethodsProps.PagesParseWikiParams): Promise<Responses.PagesParseWikiResponse>;
    /**
     * Saves the text of a wiki page.
     *
     * @param {{
     *   text: (string|undefined),
     *   page_id: (number|undefined),
     *   group_id: (number|undefined),
     *   user_id: (number|undefined),
     *   title: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PagesSaveResponse>}
     */
    pagesSave(params: MethodsProps.PagesSaveParams): Promise<Responses.PagesSaveResponse>;
    /**
     * Saves modified read and edit access settings for a wiki page.
     *
     * @param {{
     *   page_id: (number),
     *   group_id: (number|undefined),
     *   user_id: (number|undefined),
     *   view: (number|undefined),
     *   edit: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PagesSaveAccessResponse>}
     */
    pagesSaveAccess(params: MethodsProps.PagesSaveAccessParams): Promise<Responses.PagesSaveAccessResponse>;
    /**
     * Confirms a tag on a photo.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   photo_id: (string),
     *   tag_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosConfirmTag(params: MethodsProps.PhotosConfirmTagParams): Promise<Responses.OkResponse>;
    /**
     * Allows to copy a photo to the "Saved photos" album
     *
     * @param {{
     *   owner_id: (number),
     *   photo_id: (number),
     *   access_key: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosCopyResponse>}
     */
    photosCopy(params: MethodsProps.PhotosCopyParams): Promise<Responses.PhotosCopyResponse>;
    /**
     * Creates an empty photo album.
     *
     * @param {{
     *   title: (string),
     *   group_id: (number|undefined),
     *   description: (string|undefined),
     *   privacy_view: (string[]|undefined),
     *   privacy_comment: (string[]|undefined),
     *   upload_by_admins_only: (boolean|undefined),
     *   comments_disabled: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosCreateAlbumResponse>}
     */
    photosCreateAlbum(params: MethodsProps.PhotosCreateAlbumParams): Promise<Responses.PhotosCreateAlbumResponse>;
    /**
     * Adds a new comment on the photo.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   photo_id: (number),
     *   message: (string|undefined),
     *   attachments: (string[]|undefined),
     *   from_group: (boolean|undefined),
     *   reply_to_comment: (number|undefined),
     *   sticker_id: (number|undefined),
     *   access_key: (string|undefined),
     *   guid: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosCreateCommentResponse>}
     */
    photosCreateComment(params: MethodsProps.PhotosCreateCommentParams): Promise<Responses.PhotosCreateCommentResponse>;
    /**
     * Deletes a photo.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   photo_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosDelete(params: MethodsProps.PhotosDeleteParams): Promise<Responses.OkResponse>;
    /**
     * Deletes a photo album belonging to the current user.
     *
     * @param {{
     *   album_id: (number),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosDeleteAlbum(params: MethodsProps.PhotosDeleteAlbumParams): Promise<Responses.OkResponse>;
    /**
     * Deletes a comment on the photo.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   comment_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosDeleteCommentResponse>}
     */
    photosDeleteComment(params: MethodsProps.PhotosDeleteCommentParams): Promise<Responses.PhotosDeleteCommentResponse>;
    /**
     * Edits the caption of a photo.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   photo_id: (number),
     *   caption: (string|undefined),
     *   latitude: (number|undefined),
     *   longitude: (number|undefined),
     *   place_str: (string|undefined),
     *   foursquare_id: (string|undefined),
     *   delete_place: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosEdit(params: MethodsProps.PhotosEditParams): Promise<Responses.OkResponse>;
    /**
     * Edits information about a photo album.
     *
     * @param {{
     *   album_id: (number),
     *   title: (string|undefined),
     *   description: (string|undefined),
     *   owner_id: (number|undefined),
     *   privacy_view: (string[]|undefined),
     *   privacy_comment: (string[]|undefined),
     *   upload_by_admins_only: (boolean|undefined),
     *   comments_disabled: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosEditAlbum(params: MethodsProps.PhotosEditAlbumParams): Promise<Responses.OkResponse>;
    /**
     * Edits a comment on a photo.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   comment_id: (number),
     *   message: (string|undefined),
     *   attachments: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosEditComment(params: MethodsProps.PhotosEditCommentParams): Promise<Responses.OkResponse>;
    /**
     * Returns a list of a user's or community's photos.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   album_id: (string|undefined),
     *   photo_ids: (string[]|undefined),
     *   rev: (boolean|undefined),
     *   extended: (boolean|undefined),
     *   feed_type: (string|undefined),
     *   feed: (number|undefined),
     *   photo_sizes: (boolean|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetResponse>}
     */
    photosGet(params: MethodsProps.PhotosGetParams): Promise<Responses.PhotosGetResponse>;
    /**
     * Returns a list of a user's or community's photo albums.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   album_ids: (number[]|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   need_system: (boolean|undefined),
     *   need_covers: (boolean|undefined),
     *   photo_sizes: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetAlbumsResponse>}
     */
    photosGetAlbums(params: MethodsProps.PhotosGetAlbumsParams): Promise<Responses.PhotosGetAlbumsResponse>;
    /**
     * Returns the number of photo albums belonging to a user or community.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetAlbumsCountResponse>}
     */
    photosGetAlbumsCount(params: MethodsProps.PhotosGetAlbumsCountParams): Promise<Responses.PhotosGetAlbumsCountResponse>;
    /**
     * Returns a list of photos belonging to a user or community, in reverse chronological order.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   extended: (boolean|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   photo_sizes: (boolean|undefined),
     *   no_service_albums: (boolean|undefined),
     *   need_hidden: (boolean|undefined),
     *   skip_hidden: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetAllResponse>}
     */
    photosGetAll(params: MethodsProps.PhotosGetAllParams): Promise<Responses.PhotosGetAllResponse>;
    /**
     * Returns a list of comments on a specific photo album or all albums of the user sorted in reverse chronological order.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   album_id: (number|undefined),
     *   need_likes: (boolean|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetAllCommentsResponse>}
     */
    photosGetAllComments(params: MethodsProps.PhotosGetAllCommentsParams): Promise<Responses.PhotosGetAllCommentsResponse>;
    /**
     * Returns information about photos by their IDs.
     *
     * @param {{
     *   photos: (string[]),
     *   extended: (boolean|undefined),
     *   photo_sizes: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetByIdResponse>}
     */
    photosGetById(params: MethodsProps.PhotosGetByIdParams): Promise<Responses.PhotosGetByIdResponse>;
    /**
     * Returns an upload link for chat cover pictures.
     *
     * @param {{
     *   chat_id: (number),
     *   crop_x: (number|undefined),
     *   crop_y: (number|undefined),
     *   crop_width: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BaseGetUploadServerResponse>}
     */
    photosGetChatUploadServer(params: MethodsProps.PhotosGetChatUploadServerParams): Promise<Responses.BaseGetUploadServerResponse>;
    /**
     * Returns a list of comments on a photo.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   photo_id: (number),
     *   need_likes: (boolean|undefined),
     *   start_comment_id: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   sort: (string|undefined),
     *   access_key: (string|undefined),
     *   extended: (boolean|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetCommentsResponse>}
     */
    photosGetComments(params: MethodsProps.PhotosGetCommentsParams): Promise<Responses.PhotosGetCommentsResponse>;
    /**
     * Returns the server address for market album photo upload.
     *
     * @param {{
     *   group_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BaseGetUploadServerResponse>}
     */
    photosGetMarketAlbumUploadServer(params: MethodsProps.PhotosGetMarketAlbumUploadServerParams): Promise<Responses.BaseGetUploadServerResponse>;
    /**
     * Returns the server address for market photo upload.
     *
     * @param {{
     *   group_id: (number),
     *   main_photo: (boolean|undefined),
     *   crop_x: (number|undefined),
     *   crop_y: (number|undefined),
     *   crop_width: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetMarketUploadServerResponse>}
     */
    photosGetMarketUploadServer(params: MethodsProps.PhotosGetMarketUploadServerParams): Promise<Responses.PhotosGetMarketUploadServerResponse>;
    /**
     * Returns the server address for photo upload in a private message for a user.
     *
     * @param {{
     *   peer_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetMessagesUploadServerResponse>}
     */
    photosGetMessagesUploadServer(params: MethodsProps.PhotosGetMessagesUploadServerParams): Promise<Responses.PhotosGetMessagesUploadServerResponse>;
    /**
     * Returns a list of photos with tags that have not been viewed.
     *
     * @param {{
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetNewTagsResponse>}
     */
    photosGetNewTags(params: MethodsProps.PhotosGetNewTagsParams): Promise<Responses.PhotosGetNewTagsResponse>;
    /**
     * Returns the server address for owner cover upload.
     *
     * @param {{
     *   group_id: (number),
     *   crop_x: (number|undefined),
     *   crop_y: (number|undefined),
     *   crop_x2: (number|undefined),
     *   crop_y2: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BaseGetUploadServerResponse>}
     */
    photosGetOwnerCoverPhotoUploadServer(params: MethodsProps.PhotosGetOwnerCoverPhotoUploadServerParams): Promise<Responses.BaseGetUploadServerResponse>;
    /**
     * Returns an upload server address for a profile or community photo.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BaseGetUploadServerResponse>}
     */
    photosGetOwnerPhotoUploadServer(params: MethodsProps.PhotosGetOwnerPhotoUploadServerParams): Promise<Responses.BaseGetUploadServerResponse>;
    /**
     * Returns a list of tags on a photo.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   photo_id: (number),
     *   access_key: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetTagsResponse>}
     */
    photosGetTags(params: MethodsProps.PhotosGetTagsParams): Promise<Responses.PhotosGetTagsResponse>;
    /**
     * Returns the server address for photo upload.
     *
     * @param {{
     *   group_id: (number|undefined),
     *   album_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetUploadServerResponse>}
     */
    photosGetUploadServer(params: MethodsProps.PhotosGetUploadServerParams): Promise<Responses.PhotosGetUploadServerResponse>;
    /**
     * Returns a list of photos in which a user is tagged.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   extended: (boolean|undefined),
     *   sort: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetUserPhotosResponse>}
     */
    photosGetUserPhotos(params: MethodsProps.PhotosGetUserPhotosParams): Promise<Responses.PhotosGetUserPhotosResponse>;
    /**
     * Returns the server address for photo upload onto a user's wall.
     *
     * @param {{
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosGetWallUploadServerResponse>}
     */
    photosGetWallUploadServer(params: MethodsProps.PhotosGetWallUploadServerParams): Promise<Responses.PhotosGetWallUploadServerResponse>;
    /**
     * Makes a photo into an album cover.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   photo_id: (number),
     *   album_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosMakeCover(params: MethodsProps.PhotosMakeCoverParams): Promise<Responses.OkResponse>;
    /**
     * Moves a photo from one album to another.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   target_album_id: (number),
     *   photo_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosMove(params: MethodsProps.PhotosMoveParams): Promise<Responses.OkResponse>;
    /**
     * Adds a tag on the photo.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   photo_id: (number),
     *   user_id: (number),
     *   x: (number|undefined),
     *   y: (number|undefined),
     *   x2: (number|undefined),
     *   y2: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosPutTagResponse>}
     */
    photosPutTag(params: MethodsProps.PhotosPutTagParams): Promise<Responses.PhotosPutTagResponse>;
    /**
     * Removes a tag from a photo.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   photo_id: (number),
     *   tag_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosRemoveTag(params: MethodsProps.PhotosRemoveTagParams): Promise<Responses.OkResponse>;
    /**
     * Reorders the album in the list of user albums.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   album_id: (number),
     *   before: (number|undefined),
     *   after: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosReorderAlbums(params: MethodsProps.PhotosReorderAlbumsParams): Promise<Responses.OkResponse>;
    /**
     * Reorders the photo in the list of photos of the user album.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   photo_id: (number),
     *   before: (number|undefined),
     *   after: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosReorderPhotos(params: MethodsProps.PhotosReorderPhotosParams): Promise<Responses.OkResponse>;
    /**
     * Reports (submits a complaint about) a photo.
     *
     * @param {{
     *   owner_id: (number),
     *   photo_id: (number),
     *   reason: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosReport(params: MethodsProps.PhotosReportParams): Promise<Responses.OkResponse>;
    /**
     * Reports (submits a complaint about) a comment on a photo.
     *
     * @param {{
     *   owner_id: (number),
     *   comment_id: (number),
     *   reason: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosReportComment(params: MethodsProps.PhotosReportCommentParams): Promise<Responses.OkResponse>;
    /**
     * Restores a deleted photo.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   photo_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    photosRestore(params: MethodsProps.PhotosRestoreParams): Promise<Responses.OkResponse>;
    /**
     * Restores a deleted comment on a photo.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   comment_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosRestoreCommentResponse>}
     */
    photosRestoreComment(params: MethodsProps.PhotosRestoreCommentParams): Promise<Responses.PhotosRestoreCommentResponse>;
    /**
     * Saves photos after successful uploading.
     *
     * @param {{
     *   album_id: (number|undefined),
     *   group_id: (number|undefined),
     *   server: (number|undefined),
     *   photos_list: (string|undefined),
     *   hash: (string|undefined),
     *   latitude: (number|undefined),
     *   longitude: (number|undefined),
     *   caption: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosSaveResponse>}
     */
    photosSave(params: MethodsProps.PhotosSaveParams): Promise<Responses.PhotosSaveResponse>;
    /**
     * Saves market album photos after successful uploading.
     *
     * @param {{
     *   group_id: (number),
     *   photo: (string),
     *   server: (number),
     *   hash: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosSaveMarketAlbumPhotoResponse>}
     */
    photosSaveMarketAlbumPhoto(params: MethodsProps.PhotosSaveMarketAlbumPhotoParams): Promise<Responses.PhotosSaveMarketAlbumPhotoResponse>;
    /**
     * Saves market photos after successful uploading.
     *
     * @param {{
     *   group_id: (number|undefined),
     *   photo: (string),
     *   server: (number),
     *   hash: (string),
     *   crop_data: (string|undefined),
     *   crop_hash: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosSaveMarketPhotoResponse>}
     */
    photosSaveMarketPhoto(params: MethodsProps.PhotosSaveMarketPhotoParams): Promise<Responses.PhotosSaveMarketPhotoResponse>;
    /**
     * Saves a photo after being successfully uploaded. URL obtained with [vk.com/dev/photos.getMessagesUploadServer|photos.getMessagesUploadServer] method.
     *
     * @param {{
     *   photo: (string),
     *   server: (number|undefined),
     *   hash: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosSaveMessagesPhotoResponse>}
     */
    photosSaveMessagesPhoto(params: MethodsProps.PhotosSaveMessagesPhotoParams): Promise<Responses.PhotosSaveMessagesPhotoResponse>;
    /**
     * Saves cover photo after successful uploading.
     *
     * @param {{
     *   hash: (string),
     *   photo: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosSaveOwnerCoverPhotoResponse>}
     */
    photosSaveOwnerCoverPhoto(params: MethodsProps.PhotosSaveOwnerCoverPhotoParams): Promise<Responses.PhotosSaveOwnerCoverPhotoResponse>;
    /**
     * Saves a profile or community photo. Upload URL can be got with the [vk.com/dev/photos.getOwnerPhotoUploadServer|photos.getOwnerPhotoUploadServer] method.
     *
     * @param {{
     *   server: (string|undefined),
     *   hash: (string|undefined),
     *   photo: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosSaveOwnerPhotoResponse>}
     */
    photosSaveOwnerPhoto(params: MethodsProps.PhotosSaveOwnerPhotoParams): Promise<Responses.PhotosSaveOwnerPhotoResponse>;
    /**
     * Saves a photo to a user's or community's wall after being uploaded.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   group_id: (number|undefined),
     *   photo: (string),
     *   server: (number|undefined),
     *   hash: (string|undefined),
     *   latitude: (number|undefined),
     *   longitude: (number|undefined),
     *   caption: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosSaveWallPhotoResponse>}
     */
    photosSaveWallPhoto(params: MethodsProps.PhotosSaveWallPhotoParams): Promise<Responses.PhotosSaveWallPhotoResponse>;
    /**
     * Returns a list of photos.
     *
     * @param {{
     *   q: (string|undefined),
     *   lat: (number|undefined),
     *   long: (number|undefined),
     *   start_time: (number|undefined),
     *   end_time: (number|undefined),
     *   sort: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   radius: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PhotosSearchResponse>}
     */
    photosSearch(params: MethodsProps.PhotosSearchParams): Promise<Responses.PhotosSearchResponse>;
    /**
     * Adds the current user's vote to the selected answer in the poll.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   poll_id: (number),
     *   answer_ids: (number[]),
     *   is_board: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PollsAddVoteResponse>}
     */
    pollsAddVote(params: MethodsProps.PollsAddVoteParams): Promise<Responses.PollsAddVoteResponse>;
    /**
     * Creates polls that can be attached to the users' or communities' posts.
     *
     * @param {{
     *   question: (string|undefined),
     *   is_anonymous: (boolean|undefined),
     *   is_multiple: (boolean|undefined),
     *   end_date: (number|undefined),
     *   owner_id: (number|undefined),
     *   add_answers: (string|undefined),
     *   photo_id: (number|undefined),
     *   background_id: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PollsCreateResponse>}
     */
    pollsCreate(params: MethodsProps.PollsCreateParams): Promise<Responses.PollsCreateResponse>;
    /**
     * Deletes the current user's vote from the selected answer in the poll.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   poll_id: (number),
     *   answer_id: (number),
     *   is_board: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PollsDeleteVoteResponse>}
     */
    pollsDeleteVote(params: MethodsProps.PollsDeleteVoteParams): Promise<Responses.PollsDeleteVoteResponse>;
    /**
     * Edits created polls
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   poll_id: (number),
     *   question: (string|undefined),
     *   add_answers: (string|undefined),
     *   edit_answers: (string|undefined),
     *   delete_answers: (string|undefined),
     *   end_date: (number|undefined),
     *   photo_id: (number|undefined),
     *   background_id: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    pollsEdit(params: MethodsProps.PollsEditParams): Promise<Responses.OkResponse>;
    /**
     * Returns detailed information about a poll by its ID.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   is_board: (boolean|undefined),
     *   poll_id: (number),
     *   extended: (boolean|undefined),
     *   friends_count: (number|undefined),
     *   fields: (string[]|undefined),
     *   name_case: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PollsGetByIdResponse>}
     */
    pollsGetById(params: MethodsProps.PollsGetByIdParams): Promise<Responses.PollsGetByIdResponse>;
    /**
     * Returns a list of IDs of users who selected specific answers in the poll.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   poll_id: (number),
     *   answer_ids: (number[]),
     *   is_board: (boolean|undefined),
     *   friends_only: (boolean|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   name_case: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PollsGetVotersResponse>}
     */
    pollsGetVoters(params: MethodsProps.PollsGetVotersParams): Promise<Responses.PollsGetVotersResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number),
     *   photo: (string),
     *   title: (string),
     *   link: (string),
     *   price: (string|undefined),
     *   price_old: (string|undefined),
     *   button: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PrettyCardsCreateResponse>}
     */
    prettyCardsCreate(params: MethodsProps.PrettyCardsCreateParams): Promise<Responses.PrettyCardsCreateResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number),
     *   card_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PrettyCardsDeleteResponse>}
     */
    prettyCardsDelete(params: MethodsProps.PrettyCardsDeleteParams): Promise<Responses.PrettyCardsDeleteResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number),
     *   card_id: (number),
     *   photo: (string|undefined),
     *   title: (string|undefined),
     *   link: (string|undefined),
     *   price: (string|undefined),
     *   price_old: (string|undefined),
     *   button: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PrettyCardsEditResponse>}
     */
    prettyCardsEdit(params: MethodsProps.PrettyCardsEditParams): Promise<Responses.PrettyCardsEditResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PrettyCardsGetResponse>}
     */
    prettyCardsGet(params: MethodsProps.PrettyCardsGetParams): Promise<Responses.PrettyCardsGetResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number),
     *   card_ids: (number[]),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PrettyCardsGetByIdResponse>}
     */
    prettyCardsGetById(params: MethodsProps.PrettyCardsGetByIdParams): Promise<Responses.PrettyCardsGetByIdResponse>;
    /**
     * undefined
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.PrettyCardsGetUploadURLResponse>}
     */
    prettyCardsGetUploadURL(params: MethodsProps.PrettyCardsGetUploadURLParams): Promise<Responses.PrettyCardsGetUploadURLResponse>;
    /**
     * Allows the programmer to do a quick search for any substring.
     *
     * @param {{
     *   q: (string|undefined),
     *   offset: (number|undefined),
     *   limit: (number|undefined),
     *   filters: (string[]|undefined),
     *   fields: (string[]|undefined),
     *   search_global: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.SearchGetHintsResponse>}
     */
    searchGetHints(params: MethodsProps.SearchGetHintsParams): Promise<Responses.SearchGetHintsResponse>;
    /**
     * Adds user activity information to an application
     *
     * @param {{
     *   user_id: (number),
     *   activity_id: (number),
     *   value: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    secureAddAppEvent(params: MethodsProps.SecureAddAppEventParams): Promise<Responses.OkResponse>;
    /**
     * Checks the user authentication in 'IFrame' and 'Flash' apps using the 'access_token' parameter.
     *
     * @param {{
     *   token: (string|undefined),
     *   ip: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.SecureCheckTokenResponse>}
     */
    secureCheckToken(params: MethodsProps.SecureCheckTokenParams): Promise<Responses.SecureCheckTokenResponse>;
    /**
     * Returns payment balance of the application in hundredth of a vote.
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.SecureGetAppBalanceResponse>}
     */
    secureGetAppBalance(params: MethodsProps.SecureGetAppBalanceParams): Promise<Responses.SecureGetAppBalanceResponse>;
    /**
     * Shows a list of SMS notifications sent by the application using [vk.com/dev/secure.sendSMSNotification|secure.sendSMSNotification] method.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   date_from: (number|undefined),
     *   date_to: (number|undefined),
     *   limit: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.SecureGetSMSHistoryResponse>}
     */
    secureGetSMSHistory(params: MethodsProps.SecureGetSMSHistoryParams): Promise<Responses.SecureGetSMSHistoryResponse>;
    /**
     * Shows history of votes transaction between users and the application.
     *
     * @param {{
     *   type: (number|undefined),
     *   uid_from: (number|undefined),
     *   uid_to: (number|undefined),
     *   date_from: (number|undefined),
     *   date_to: (number|undefined),
     *   limit: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.SecureGetTransactionsHistoryResponse>}
     */
    secureGetTransactionsHistory(params: MethodsProps.SecureGetTransactionsHistoryParams): Promise<Responses.SecureGetTransactionsHistoryResponse>;
    /**
     * Returns one of the previously set game levels of one or more users in the application.
     *
     * @param {{
     *   user_ids: (number[]),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.SecureGetUserLevelResponse>}
     */
    secureGetUserLevel(params: MethodsProps.SecureGetUserLevelParams): Promise<Responses.SecureGetUserLevelResponse>;
    /**
     * Opens the game achievement and gives the user a sticker
     *
     * @param {{
     *   user_ids: (number[]),
     *   achievement_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.SecureGiveEventStickerResponse>}
     */
    secureGiveEventSticker(params: MethodsProps.SecureGiveEventStickerParams): Promise<Responses.SecureGiveEventStickerResponse>;
    /**
     * Sends notification to the user.
     *
     * @param {{
     *   user_ids: (number[]|undefined),
     *   user_id: (number|undefined),
     *   message: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.SecureSendNotificationResponse>}
     */
    secureSendNotification(params: MethodsProps.SecureSendNotificationParams): Promise<Responses.SecureSendNotificationResponse>;
    /**
     * Sends 'SMS' notification to a user's mobile device.
     *
     * @param {{
     *   user_id: (number),
     *   message: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    secureSendSMSNotification(params: MethodsProps.SecureSendSMSNotificationParams): Promise<Responses.OkResponse>;
    /**
     * Sets a counter which is shown to the user in bold in the left menu.
     *
     * @param {{
     *   counters: (string[]|undefined),
     *   user_id: (number|undefined),
     *   counter: (number|undefined),
     *   increment: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    secureSetCounter(params: MethodsProps.SecureSetCounterParams): Promise<Responses.OkResponse>;
    /**
     * Returns statistics of a community or an application.
     *
     * @param {{
     *   group_id: (number|undefined),
     *   app_id: (number|undefined),
     *   timestamp_from: (number|undefined),
     *   timestamp_to: (number|undefined),
     *   interval: (string|undefined),
     *   intervals_count: (number|undefined),
     *   filters: (string[]|undefined),
     *   stats_groups: (string[]|undefined),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StatsGetResponse>}
     */
    statsGet(params: MethodsProps.StatsGetParams): Promise<Responses.StatsGetResponse>;
    /**
     * Returns stats for a wall post.
     *
     * @param {{
     *   owner_id: (string),
     *   post_ids: (number[]),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StatsGetPostReachResponse>}
     */
    statsGetPostReach(params: MethodsProps.StatsGetPostReachParams): Promise<Responses.StatsGetPostReachResponse>;
    /**
     * undefined
     *
     * @param {{
     *   id: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    statsTrackVisitor(params: MethodsProps.StatsTrackVisitorParams): Promise<Responses.OkResponse>;
    /**
     * Returns data required to show the status of a user or community.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StatusGetResponse>}
     */
    statusGet(params: MethodsProps.StatusGetParams): Promise<Responses.StatusGetResponse>;
    /**
     * Sets a new status for the current user.
     *
     * @param {{
     *   text: (string|undefined),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    statusSet(params: MethodsProps.StatusSetParams): Promise<Responses.OkResponse>;
    /**
     * Returns a value of variable with the name set by key parameter.
     *
     * @param {{
     *   key: (string|undefined),
     *   keys: (string[]|undefined),
     *   user_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StorageGetV5110Response>}
     */
    storageGet(params: MethodsProps.StorageGetParams): Promise<Responses.StorageGetV5110Response>;
    /**
     * Returns the names of all variables.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StorageGetKeysResponse>}
     */
    storageGetKeys(params: MethodsProps.StorageGetKeysParams): Promise<Responses.StorageGetKeysResponse>;
    /**
     * Saves a value of variable with the name set by 'key' parameter.
     *
     * @param {{
     *   key: (string),
     *   value: (string|undefined),
     *   user_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    storageSet(params: MethodsProps.StorageSetParams): Promise<Responses.OkResponse>;
    /**
     * Allows to hide stories from chosen sources from current user's feed.
     *
     * @param {{
     *   owners_ids: (number[]),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    storiesBanOwner(params: MethodsProps.StoriesBanOwnerParams): Promise<Responses.OkResponse>;
    /**
     * Allows to delete story.
     *
     * @param {{
     *   owner_id: (number),
     *   story_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    storiesDelete(params: MethodsProps.StoriesDeleteParams): Promise<Responses.OkResponse>;
    /**
     * Returns stories available for current user.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   extended: (boolean|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StoriesGetV5113Response>}
     */
    storiesGet(params: MethodsProps.StoriesGetParams): Promise<Responses.StoriesGetV5113Response>;
    /**
     * Returns list of sources hidden from current user's feed.
     *
     * @param {{
     *   extended: (boolean|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StoriesGetBannedResponse>}
     */
    storiesGetBanned(params: MethodsProps.StoriesGetBannedParams): Promise<Responses.StoriesGetBannedResponse>;
    /**
     * Returns story by its ID.
     *
     * @param {{
     *   stories: (string[]),
     *   extended: (boolean|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StoriesGetByIdResponse>}
     */
    storiesGetById(params: MethodsProps.StoriesGetByIdParams): Promise<Responses.StoriesGetByIdResponse>;
    /**
     * Returns URL for uploading a story with photo.
     *
     * @param {{
     *   add_to_news: (boolean|undefined),
     *   user_ids: (number[]|undefined),
     *   reply_to_story: (string|undefined),
     *   link_text: (string|undefined),
     *   link_url: (string|undefined),
     *   group_id: (number|undefined),
     *   clickable_stickers: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StoriesGetPhotoUploadServerResponse>}
     */
    storiesGetPhotoUploadServer(params: MethodsProps.StoriesGetPhotoUploadServerParams): Promise<Responses.StoriesGetPhotoUploadServerResponse>;
    /**
     * Returns replies to the story.
     *
     * @param {{
     *   owner_id: (number),
     *   story_id: (number),
     *   access_key: (string|undefined),
     *   extended: (boolean|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StoriesGetV5113Response>}
     */
    storiesGetReplies(params: MethodsProps.StoriesGetRepliesParams): Promise<Responses.StoriesGetV5113Response>;
    /**
     * Returns stories available for current user.
     *
     * @param {{
     *   owner_id: (number),
     *   story_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StoriesGetStatsResponse>}
     */
    storiesGetStats(params: MethodsProps.StoriesGetStatsParams): Promise<Responses.StoriesGetStatsResponse>;
    /**
     * Allows to receive URL for uploading story with video.
     *
     * @param {{
     *   add_to_news: (boolean|undefined),
     *   user_ids: (number[]|undefined),
     *   reply_to_story: (string|undefined),
     *   link_text: (string|undefined),
     *   link_url: (string|undefined),
     *   group_id: (number|undefined),
     *   clickable_stickers: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StoriesGetVideoUploadServerResponse>}
     */
    storiesGetVideoUploadServer(params: MethodsProps.StoriesGetVideoUploadServerParams): Promise<Responses.StoriesGetVideoUploadServerResponse>;
    /**
     * Returns a list of story viewers.
     *
     * @param {{
     *   owner_id: (number),
     *   story_id: (number),
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StoriesGetViewersExtendedV5115Response>}
     */
    storiesGetViewers(params: MethodsProps.StoriesGetViewersParams): Promise<Responses.StoriesGetViewersExtendedV5115Response>;
    /**
     * Hides all replies in the last 24 hours from the user to current user's stories.
     *
     * @param {{
     *   owner_id: (number),
     *   group_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    storiesHideAllReplies(params: MethodsProps.StoriesHideAllRepliesParams): Promise<Responses.OkResponse>;
    /**
     * Hides the reply to the current user's story.
     *
     * @param {{
     *   owner_id: (number),
     *   story_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    storiesHideReply(params: MethodsProps.StoriesHideReplyParams): Promise<Responses.OkResponse>;
    /**
     * undefined
     *
     * @param {{
     *   q: (string|undefined),
     *   place_id: (number|undefined),
     *   latitude: (number|undefined),
     *   longitude: (number|undefined),
     *   radius: (number|undefined),
     *   mentioned_id: (number|undefined),
     *   count: (number|undefined),
     *   extended: (boolean|undefined),
     *   fields: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StoriesGetV5113Response>}
     */
    storiesSearch(params: MethodsProps.StoriesSearchParams): Promise<Responses.StoriesGetV5113Response>;
    /**
     * Allows to show stories from hidden sources in current user's feed.
     *
     * @param {{
     *   owners_ids: (number[]),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    storiesUnbanOwner(params: MethodsProps.StoriesUnbanOwnerParams): Promise<Responses.OkResponse>;
    /**
     * Allows to receive data for the connection to Streaming API.
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.StreamingGetServerUrlResponse>}
     */
    streamingGetServerUrl(params: MethodsProps.StreamingGetServerUrlParams): Promise<Responses.StreamingGetServerUrlResponse>;
    /**
     * undefined
     *
     * @param {{
     *   monthly_tier: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    streamingSetSettings(params: MethodsProps.StreamingSetSettingsParams): Promise<Responses.OkResponse>;
    /**
     * Returns detailed information on users.
     *
     * @param {{
     *   user_ids: (string[]|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   name_case: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.UsersGetResponse>}
     */
    usersGet(params: MethodsProps.UsersGetParams): Promise<Responses.UsersGetResponse>;
    /**
     * Returns a list of IDs of followers of the user in question, sorted by date added, most recent first.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   name_case: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.UsersGetFollowersResponse>}
     */
    usersGetFollowers(params: MethodsProps.UsersGetFollowersParams): Promise<Responses.UsersGetFollowersResponse>;
    /**
     * Returns a list of IDs of users and communities followed by the user.
     *
     * @param {{
     *   user_id: (number|undefined),
     *   extended: (boolean|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.UsersGetSubscriptionsResponse>}
     */
    usersGetSubscriptions(params: MethodsProps.UsersGetSubscriptionsParams): Promise<Responses.UsersGetSubscriptionsResponse>;
    /**
     * Reports (submits a complain about) a user.
     *
     * @param {{
     *   user_id: (number),
     *   type: (string),
     *   comment: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    usersReport(params: MethodsProps.UsersReportParams): Promise<Responses.OkResponse>;
    /**
     * Returns a list of users matching the search criteria.
     *
     * @param {{
     *   q: (string|undefined),
     *   sort: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   city: (number|undefined),
     *   country: (number|undefined),
     *   hometown: (string|undefined),
     *   university_country: (number|undefined),
     *   university: (number|undefined),
     *   university_year: (number|undefined),
     *   university_faculty: (number|undefined),
     *   university_chair: (number|undefined),
     *   sex: (number|undefined),
     *   status: (number|undefined),
     *   age_from: (number|undefined),
     *   age_to: (number|undefined),
     *   birth_day: (number|undefined),
     *   birth_month: (number|undefined),
     *   birth_year: (number|undefined),
     *   online: (boolean|undefined),
     *   has_photo: (boolean|undefined),
     *   school_country: (number|undefined),
     *   school_city: (number|undefined),
     *   school_class: (number|undefined),
     *   school: (number|undefined),
     *   school_year: (number|undefined),
     *   religion: (string|undefined),
     *   company: (string|undefined),
     *   position: (string|undefined),
     *   group_id: (number|undefined),
     *   from_list: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.UsersSearchResponse>}
     */
    usersSearch(params: MethodsProps.UsersSearchParams): Promise<Responses.UsersSearchResponse>;
    /**
     * Checks whether a link is blocked in VK.
     *
     * @param {{
     *   url: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.UtilsCheckLinkResponse>}
     */
    utilsCheckLink(params: MethodsProps.UtilsCheckLinkParams): Promise<Responses.UtilsCheckLinkResponse>;
    /**
     * Deletes shortened link from user's list.
     *
     * @param {{
     *   key: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    utilsDeleteFromLastShortened(params: MethodsProps.UtilsDeleteFromLastShortenedParams): Promise<Responses.OkResponse>;
    /**
     * Returns a list of user's shortened links.
     *
     * @param {{
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.UtilsGetLastShortenedLinksResponse>}
     */
    utilsGetLastShortenedLinks(params: MethodsProps.UtilsGetLastShortenedLinksParams): Promise<Responses.UtilsGetLastShortenedLinksResponse>;
    /**
     * Returns stats data for shortened link.
     *
     * @param {{
     *   key: (string),
     *   source: (string|undefined),
     *   access_key: (string|undefined),
     *   interval: (string|undefined),
     *   intervals_count: (number|undefined),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.UtilsGetLinkStatsResponse>}
     */
    utilsGetLinkStats(params: MethodsProps.UtilsGetLinkStatsParams): Promise<Responses.UtilsGetLinkStatsResponse>;
    /**
     * Returns the current time of the VK server.
     *
     * @param {{
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.UtilsGetServerTimeResponse>}
     */
    utilsGetServerTime(params: MethodsProps.UtilsGetServerTimeParams): Promise<Responses.UtilsGetServerTimeResponse>;
    /**
     * Allows to receive a link shortened via vk.cc.
     *
     * @param {{
     *   url: (string),
     *   private: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.UtilsGetShortLinkResponse>}
     */
    utilsGetShortLink(params: MethodsProps.UtilsGetShortLinkParams): Promise<Responses.UtilsGetShortLinkResponse>;
    /**
     * Detects a type of object (e.g., user, community, application) and its ID by screen name.
     *
     * @param {{
     *   screen_name: (string),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.UtilsResolveScreenNameResponse>}
     */
    utilsResolveScreenName(params: MethodsProps.UtilsResolveScreenNameParams): Promise<Responses.UtilsResolveScreenNameResponse>;
    /**
     * Adds a video to a user or community page.
     *
     * @param {{
     *   target_id: (number|undefined),
     *   video_id: (number),
     *   owner_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoAdd(params: MethodsProps.VideoAddParams): Promise<Responses.OkResponse>;
    /**
     * Creates an empty album for videos.
     *
     * @param {{
     *   group_id: (number|undefined),
     *   title: (string|undefined),
     *   privacy: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.VideoAddAlbumResponse>}
     */
    videoAddAlbum(params: MethodsProps.VideoAddAlbumParams): Promise<Responses.VideoAddAlbumResponse>;
    /**
     * undefined
     *
     * @param {{
     *   target_id: (number|undefined),
     *   album_id: (number|undefined),
     *   album_ids: (number[]|undefined),
     *   owner_id: (number),
     *   video_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoAddToAlbum(params: MethodsProps.VideoAddToAlbumParams): Promise<Responses.OkResponse>;
    /**
     * Adds a new comment on a video.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   video_id: (number),
     *   message: (string|undefined),
     *   attachments: (string[]|undefined),
     *   from_group: (boolean|undefined),
     *   reply_to_comment: (number|undefined),
     *   sticker_id: (number|undefined),
     *   guid: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.VideoCreateCommentResponse>}
     */
    videoCreateComment(params: MethodsProps.VideoCreateCommentParams): Promise<Responses.VideoCreateCommentResponse>;
    /**
     * Deletes a video from a user or community page.
     *
     * @param {{
     *   video_id: (number),
     *   owner_id: (number|undefined),
     *   target_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoDelete(params: MethodsProps.VideoDeleteParams): Promise<Responses.OkResponse>;
    /**
     * Deletes a video album.
     *
     * @param {{
     *   group_id: (number|undefined),
     *   album_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoDeleteAlbum(params: MethodsProps.VideoDeleteAlbumParams): Promise<Responses.OkResponse>;
    /**
     * Deletes a comment on a video.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   comment_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoDeleteComment(params: MethodsProps.VideoDeleteCommentParams): Promise<Responses.OkResponse>;
    /**
     * Edits information about a video on a user or community page.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   video_id: (number),
     *   name: (string|undefined),
     *   desc: (string|undefined),
     *   privacy_view: (string[]|undefined),
     *   privacy_comment: (string[]|undefined),
     *   no_comments: (boolean|undefined),
     *   repeat: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoEdit(params: MethodsProps.VideoEditParams): Promise<Responses.OkResponse>;
    /**
     * Edits the title of a video album.
     *
     * @param {{
     *   group_id: (number|undefined),
     *   album_id: (number),
     *   title: (string),
     *   privacy: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoEditAlbum(params: MethodsProps.VideoEditAlbumParams): Promise<Responses.OkResponse>;
    /**
     * Edits the text of a comment on a video.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   comment_id: (number),
     *   message: (string|undefined),
     *   attachments: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoEditComment(params: MethodsProps.VideoEditCommentParams): Promise<Responses.OkResponse>;
    /**
     * Returns detailed information about videos.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   videos: (string[]|undefined),
     *   album_id: (number|undefined),
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.VideoGetResponse>}
     */
    videoGet(params: MethodsProps.VideoGetParams): Promise<Responses.VideoGetResponse>;
    /**
     * Returns video album info
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   album_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.VideoGetAlbumByIdResponse>}
     */
    videoGetAlbumById(params: MethodsProps.VideoGetAlbumByIdParams): Promise<Responses.VideoGetAlbumByIdResponse>;
    /**
     * Returns a list of video albums owned by a user or community.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   extended: (boolean|undefined),
     *   need_system: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.VideoGetAlbumsResponse>}
     */
    videoGetAlbums(params: MethodsProps.VideoGetAlbumsParams): Promise<Responses.VideoGetAlbumsResponse>;
    /**
     * undefined
     *
     * @param {{
     *   target_id: (number|undefined),
     *   owner_id: (number),
     *   video_id: (number),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.VideoGetAlbumsByVideoResponse>}
     */
    videoGetAlbumsByVideo(params: MethodsProps.VideoGetAlbumsByVideoParams): Promise<Responses.VideoGetAlbumsByVideoResponse>;
    /**
     * Returns a list of comments on a video.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   video_id: (number),
     *   need_likes: (boolean|undefined),
     *   start_comment_id: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   sort: (string|undefined),
     *   extended: (boolean|undefined),
     *   fields: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.VideoGetCommentsResponse>}
     */
    videoGetComments(params: MethodsProps.VideoGetCommentsParams): Promise<Responses.VideoGetCommentsResponse>;
    /**
     * undefined
     *
     * @param {{
     *   target_id: (number|undefined),
     *   album_id: (number|undefined),
     *   album_ids: (number[]|undefined),
     *   owner_id: (number),
     *   video_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoRemoveFromAlbum(params: MethodsProps.VideoRemoveFromAlbumParams): Promise<Responses.OkResponse>;
    /**
     * Reorders the album in the list of user video albums.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   album_id: (number),
     *   before: (number|undefined),
     *   after: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoReorderAlbums(params: MethodsProps.VideoReorderAlbumsParams): Promise<Responses.OkResponse>;
    /**
     * Reorders the video in the video album.
     *
     * @param {{
     *   target_id: (number|undefined),
     *   album_id: (number|undefined),
     *   owner_id: (number),
     *   video_id: (number),
     *   before_owner_id: (number|undefined),
     *   before_video_id: (number|undefined),
     *   after_owner_id: (number|undefined),
     *   after_video_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoReorderVideos(params: MethodsProps.VideoReorderVideosParams): Promise<Responses.OkResponse>;
    /**
     * Reports (submits a complaint about) a video.
     *
     * @param {{
     *   owner_id: (number),
     *   video_id: (number),
     *   reason: (number|undefined),
     *   comment: (string|undefined),
     *   search_query: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoReport(params: MethodsProps.VideoReportParams): Promise<Responses.OkResponse>;
    /**
     * Reports (submits a complaint about) a comment on a video.
     *
     * @param {{
     *   owner_id: (number),
     *   comment_id: (number),
     *   reason: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoReportComment(params: MethodsProps.VideoReportCommentParams): Promise<Responses.OkResponse>;
    /**
     * Restores a previously deleted video.
     *
     * @param {{
     *   video_id: (number),
     *   owner_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    videoRestore(params: MethodsProps.VideoRestoreParams): Promise<Responses.OkResponse>;
    /**
     * Restores a previously deleted comment on a video.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   comment_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.VideoRestoreCommentResponse>}
     */
    videoRestoreComment(params: MethodsProps.VideoRestoreCommentParams): Promise<Responses.VideoRestoreCommentResponse>;
    /**
     * Returns a server address (required for upload) and video data.
     *
     * @param {{
     *   name: (string|undefined),
     *   description: (string|undefined),
     *   is_private: (boolean|undefined),
     *   wallpost: (boolean|undefined),
     *   link: (string|undefined),
     *   group_id: (number|undefined),
     *   album_id: (number|undefined),
     *   privacy_view: (string[]|undefined),
     *   privacy_comment: (string[]|undefined),
     *   no_comments: (boolean|undefined),
     *   repeat: (boolean|undefined),
     *   compression: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.VideoSaveResponse>}
     */
    videoSave(params: MethodsProps.VideoSaveParams): Promise<Responses.VideoSaveResponse>;
    /**
     * Returns a list of videos under the set search criterion.
     *
     * @param {{
     *   q: (string),
     *   sort: (number|undefined),
     *   hd: (number|undefined),
     *   adult: (boolean|undefined),
     *   filters: (string[]|undefined),
     *   search_own: (boolean|undefined),
     *   offset: (number|undefined),
     *   longer: (number|undefined),
     *   shorter: (number|undefined),
     *   count: (number|undefined),
     *   extended: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.VideoSearchResponse>}
     */
    videoSearch(params: MethodsProps.VideoSearchParams): Promise<Responses.VideoSearchResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number),
     *   post_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BaseBoolResponse>}
     */
    wallCloseComments(params: MethodsProps.WallCloseCommentsParams): Promise<Responses.BaseBoolResponse>;
    /**
     * Adds a comment to a post on a user wall or community wall.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   post_id: (number),
     *   from_group: (number|undefined),
     *   message: (string|undefined),
     *   reply_to_comment: (number|undefined),
     *   attachments: (string[]|undefined),
     *   sticker_id: (number|undefined),
     *   guid: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.WallCreateCommentResponse>}
     */
    wallCreateComment(params: MethodsProps.WallCreateCommentParams): Promise<Responses.WallCreateCommentResponse>;
    /**
     * Deletes a post from a user wall or community wall.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   post_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    wallDelete(params: MethodsProps.WallDeleteParams): Promise<Responses.OkResponse>;
    /**
     * Deletes a comment on a post on a user wall or community wall.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   comment_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    wallDeleteComment(params: MethodsProps.WallDeleteCommentParams): Promise<Responses.OkResponse>;
    /**
     * Edits a post on a user wall or community wall.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   post_id: (number),
     *   friends_only: (boolean|undefined),
     *   message: (string|undefined),
     *   attachments: (string[]|undefined),
     *   services: (string|undefined),
     *   signed: (boolean|undefined),
     *   publish_date: (number|undefined),
     *   lat: (number|undefined),
     *   long: (number|undefined),
     *   place_id: (number|undefined),
     *   mark_as_ads: (boolean|undefined),
     *   close_comments: (boolean|undefined),
     *   poster_bkg_id: (number|undefined),
     *   poster_bkg_owner_id: (number|undefined),
     *   poster_bkg_access_hash: (string|undefined),
     *   copyright: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.WallEditResponse>}
     */
    wallEdit(params: MethodsProps.WallEditParams): Promise<Responses.WallEditResponse>;
    /**
     * Allows to edit hidden post.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   post_id: (number),
     *   message: (string|undefined),
     *   attachments: (string[]|undefined),
     *   signed: (boolean|undefined),
     *   lat: (number|undefined),
     *   long: (number|undefined),
     *   place_id: (number|undefined),
     *   link_button: (string|undefined),
     *   link_title: (string|undefined),
     *   link_image: (string|undefined),
     *   link_video: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    wallEditAdsStealth(params: MethodsProps.WallEditAdsStealthParams): Promise<Responses.OkResponse>;
    /**
     * Edits a comment on a user wall or community wall.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   comment_id: (number),
     *   message: (string|undefined),
     *   attachments: (string[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    wallEditComment(params: MethodsProps.WallEditCommentParams): Promise<Responses.OkResponse>;
    /**
     * Returns a list of posts on a user wall or community wall.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   domain: (string|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   filter: (string|undefined),
     *   extended: (boolean|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.WallGetResponse>}
     */
    wallGet(params: MethodsProps.WallGetParams): Promise<Responses.WallGetResponse>;
    /**
     * Returns a list of posts from user or community walls by their IDs.
     *
     * @param {{
     *   posts: (string[]),
     *   extended: (boolean|undefined),
     *   copy_history_depth: (number|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.WallGetByIdResponse>}
     */
    wallGetById(params: MethodsProps.WallGetByIdParams): Promise<Responses.WallGetByIdResponse>;
    /**
     * Returns a comment on a post on a user wall or community wall.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   comment_id: (number),
     *   extended: (boolean|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.WallGetCommentResponse>}
     */
    wallGetComment(params: MethodsProps.WallGetCommentParams): Promise<Responses.WallGetCommentResponse>;
    /**
     * Returns a list of comments on a post on a user wall or community wall.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   post_id: (number|undefined),
     *   need_likes: (boolean|undefined),
     *   start_comment_id: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   sort: (string|undefined),
     *   preview_length: (number|undefined),
     *   extended: (boolean|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   comment_id: (number|undefined),
     *   thread_items_count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.WallGetCommentsResponse>}
     */
    wallGetComments(params: MethodsProps.WallGetCommentsParams): Promise<Responses.WallGetCommentsResponse>;
    /**
     * Returns information about reposts of a post on user wall or community wall.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   post_id: (number|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.WallGetRepostsResponse>}
     */
    wallGetReposts(params: MethodsProps.WallGetRepostsParams): Promise<Responses.WallGetRepostsResponse>;
    /**
     * undefined
     *
     * @param {{
     *   owner_id: (number),
     *   post_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.BaseBoolResponse>}
     */
    wallOpenComments(params: MethodsProps.WallOpenCommentsParams): Promise<Responses.BaseBoolResponse>;
    /**
     * Pins the post on wall.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   post_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    wallPin(params: MethodsProps.WallPinParams): Promise<Responses.OkResponse>;
    /**
     * Adds a new post on a user wall or community wall. Can also be used to publish suggested or scheduled posts.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   friends_only: (boolean|undefined),
     *   from_group: (boolean|undefined),
     *   message: (string|undefined),
     *   attachments: (string[]|undefined),
     *   services: (string|undefined),
     *   signed: (boolean|undefined),
     *   publish_date: (number|undefined),
     *   lat: (number|undefined),
     *   long: (number|undefined),
     *   place_id: (number|undefined),
     *   post_id: (number|undefined),
     *   guid: (string|undefined),
     *   mark_as_ads: (boolean|undefined),
     *   close_comments: (boolean|undefined),
     *   mute_notifications: (boolean|undefined),
     *   copyright: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.WallPostResponse>}
     */
    wallPost(params: MethodsProps.WallPostParams): Promise<Responses.WallPostResponse>;
    /**
     * Allows to create hidden post which will not be shown on the community's wall and can be used for creating an ad with type "Community post".
     *
     * @param {{
     *   owner_id: (number),
     *   message: (string|undefined),
     *   attachments: (string[]|undefined),
     *   signed: (boolean|undefined),
     *   lat: (number|undefined),
     *   long: (number|undefined),
     *   place_id: (number|undefined),
     *   guid: (string|undefined),
     *   link_button: (string|undefined),
     *   link_title: (string|undefined),
     *   link_image: (string|undefined),
     *   link_video: (string|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.WallPostAdsStealthResponse>}
     */
    wallPostAdsStealth(params: MethodsProps.WallPostAdsStealthParams): Promise<Responses.WallPostAdsStealthResponse>;
    /**
     * Reports (submits a complaint about) a comment on a post on a user wall or community wall.
     *
     * @param {{
     *   owner_id: (number),
     *   comment_id: (number),
     *   reason: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    wallReportComment(params: MethodsProps.WallReportCommentParams): Promise<Responses.OkResponse>;
    /**
     * Reports (submits a complaint about) a post on a user wall or community wall.
     *
     * @param {{
     *   owner_id: (number),
     *   post_id: (number),
     *   reason: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    wallReportPost(params: MethodsProps.WallReportPostParams): Promise<Responses.OkResponse>;
    /**
     * Reposts (copies) an object to a user wall or community wall.
     *
     * @param {{
     *   object: (string),
     *   message: (string|undefined),
     *   group_id: (number|undefined),
     *   mark_as_ads: (boolean|undefined),
     *   mute_notifications: (boolean|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.WallRepostResponse>}
     */
    wallRepost(params: MethodsProps.WallRepostParams): Promise<Responses.WallRepostResponse>;
    /**
     * Restores a post deleted from a user wall or community wall.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   post_id: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    wallRestore(params: MethodsProps.WallRestoreParams): Promise<Responses.OkResponse>;
    /**
     * Restores a comment deleted from a user wall or community wall.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   comment_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    wallRestoreComment(params: MethodsProps.WallRestoreCommentParams): Promise<Responses.OkResponse>;
    /**
     * Allows to search posts on user or community walls.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   domain: (string|undefined),
     *   query: (string|undefined),
     *   owners_only: (boolean|undefined),
     *   count: (number|undefined),
     *   offset: (number|undefined),
     *   extended: (boolean|undefined),
     *   fields: (Models.BaseUserGroupFields[]|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.WallSearchResponse>}
     */
    wallSearch(params: MethodsProps.WallSearchParams): Promise<Responses.WallSearchResponse>;
    /**
     * Unpins the post on wall.
     *
     * @param {{
     *   owner_id: (number|undefined),
     *   post_id: (number),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.OkResponse>}
     */
    wallUnpin(params: MethodsProps.WallUnpinParams): Promise<Responses.OkResponse>;
    /**
     * Gets a list of comments for the page added through the [vk.com/dev/Comments|Comments widget].
     *
     * @param {{
     *   widget_api_id: (number|undefined),
     *   url: (string|undefined),
     *   page_id: (string|undefined),
     *   order: (string|undefined),
     *   fields: (Models.UsersFields[]|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.WidgetsGetCommentsResponse>}
     */
    widgetsGetComments(params: MethodsProps.WidgetsGetCommentsParams): Promise<Responses.WidgetsGetCommentsResponse>;
    /**
     * Gets a list of application/site pages where the [vk.com/dev/Comments|Comments widget] or [vk.com/dev/Like|Like widget] is installed.
     *
     * @param {{
     *   widget_api_id: (number|undefined),
     *   order: (string|undefined),
     *   period: (string|undefined),
     *   offset: (number|undefined),
     *   count: (number|undefined),
     *   access_token: (string|undefined)
     * }} params
     *
     * @returns {Promise<Responses.WidgetsGetPagesResponse>}
     */
    widgetsGetPages(params: MethodsProps.WidgetsGetPagesParams): Promise<Responses.WidgetsGetPagesResponse>;
}
